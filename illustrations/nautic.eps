%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 13.0.0
%%For: (user) ()
%%Title: (nautical.eps)
%%CreationDate: 12/9/2010 3:41 PM
%%BoundingBox: 11 17 596 582
%%HiResBoundingBox: 11.918 17.7959 595.2998 581.2432
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKProcessColor: 0.74902 0.678431 0.670588 0.901961 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 2 0 () 
%AI3_TemplateBox: 300.5 299.5 300.5 299.5
%AI3_TileBox: 2.3999 -120.8701 597.4199 720.9902
%AI3_DocumentPreview: Header
%AI5_ArtSize: 600 600
%AI5_RulerUnits: 6
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 1
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -1395.3501 1068.2573 0.3333 1146 641 18 0 0 83 109 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 1 1 1 1 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 124 8
%%BeginData: 23727 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD84FF7DA87D7E7DA87D7E7DFF84A984A984A984A9A8FD0BFFC3CA
%A1CAC3CAA1CACAFFA1CAA1C3A1CAA1A1A1FF7D7E7DA87D7E7D7EA8FF84A9
%84A984A984A9A8FD0AFFCAA1CAC3CAA1CAC3C3CACAA1C3A1CAA1C3A1C3CA
%A87DA87D7E7DA87D7EA8AF84A984A984A984A9AFFD09FF52002700270027
%007DFF5A2F302F5A2F302FA9FFFFAFFFFFFFAFFD04FFBC8DB58DB593B58C
%CAFF9A68936893689368C3FF5200270027002700A8FF5A2F5A2F302F362F
%A9FD04FFAFFFFFFFAFFFCAB58CB593B58DB593FFA89268936893688C6FFF
%7E2100270027002728FF84302F302F5A2F3054FD0AFF7D21002700270028
%A8FF7E302F302F302F5AA8FFAFFFA8FFA9FFA8FFFFFF9AB593938DB58CBC
%FFFFA1686893686F6893CFFF7D21002700270028FFFF7E2F2F302F302F5A
%FFFFA8FFA9FFA8FFA9FFFFFF94938DB593938CC3FFFF6F93686F689368A1
%FFFF27270027002700A2FFFF2F302F302F302FA9FD0BFF2828272827277D
%FFFFFF545A2F5A303084FFFFFFAFFFFFFFAFFD05FF93B593B593B5CAFFFF
%FF6F936F936E93A1FFFFFF2728272827277DFFFFFF2F5A305A2F5AA9FD05
%FFAFFD06FFCA8DB593B593BCFFFFFFC368936E936893FFFFFF7D00282728
%0052FFFFFF852F5A2F5A2F5AFD0CFF7D0028212727FD04FF842F302F302F
%FD05FFA8FFAFFFA9FD04FFBC8CB593B594FD04FF9A6893686E6FFD04FF53
%0027002728FD04FF5A2F5A2F3053FD05FFAFFFA8FFAFFFFFFFCAB58DB593
%93A1FFFFFFA89368936892A1FFFFFFA827002821217DFFFFFFA8302F302F
%30A8FD0CFFA8272128007DFD04FFA85A2F5A2FA9FD06FFAFFD07FFC3B593
%B58CCAFD04FFCA93689368C3FD04FF7E27272800A8FD04FFA8302F5A2FA9
%FD08FFAFFD05FFBCB593B593FD05FF9A936F936FFD05FF5227212728FD05
%FF5A5A30305AFD0EFF28210028A8FD05FF53302F5AA8FD05FFAFFFA8FD07
%FF93B58CBCFD06FF6F686893FD06FF27270028FD06FF2F302F5AFD06FFA8
%FFA9FD06FFCA8C938CC3FD05FFCA689368A1FD05FF7E0027007EFD05FF84
%2F302FA9FD0EFFA800277DFD06FFA92F3084FD07FFAFFD08FFC393B5CAFD
%06FFC36893A1FD06FF7E00277DFD06FF852F5AA9FD10FFBC8DBCFD07FF9A
%6893FD07FF280052FD06FFAF5A2F5AFD0FFFA82800FD07FFA8542FFD09FF
%A9FD07FFA8B593FD07FFCA936EFD07FFA82728FD07FFA83053FD09FFAFFD
%07FFA18C9AFD07FF9A68A1FD07FF52007DFD07FF5A3084FD10FF5277FD08
%FF5A85FD12FF93CAFD08FF9AA1FD08FF287EFD08FF5AA9FD08FFAFFD09FF
%93FD08FFCA6FFD08FFA828FD08FFA92FFD11FFA8A8FD08FFA9A8FD12FFCA
%A8FD08FFCAA8FD08FFA8A8FD08FFAFA9FD11FFCACAFD08FFCACAFD08FFA8
%A8FD08FFA9A9FDB0FFAFFD0BFFA1CAC3CACAFD07FFA8A984A9A8FD07FFA8
%A87DA87DFD09FFA7CAA1CACAFD0FFFCAFFAFFFFFFFAFFD34FFAFFD07FFCA
%C493B59ABC8DBCC3FD04FFAF7E5A2F842F307EAFFD04FF7E530052522727
%7EA8FFFFFFCAC36F93939A689AA1FD0BFFCAC393B5FFFFAFFFFFFFAFFD18
%FF7EFD15FFAFFFA8FFAFFFA8FFAFFFFFFFCA9393BC8CBC93B59AB5A8FFFF
%A90D7E2F305A5A2F5A2FFFFFFF52275221277D00522753FFFFA8936F9A68
%9A6F687593A1FD09FF9AB58C9393FFAFFFA8FFA9FFA8FFAFFD14FFA97EFD
%16FFAFFD0BFF93BCBCB59ABC93C393FFFFFFA8365A7E2F85307E5A85FFFF
%FF7D007D275253275252A8FFFFFF93939A939A9A6FA193FD09FF93B593B5
%93B6CAFFAFFFFFFFAFFFFFFFA1CAFD0FFFA9FFFFA92FFFFFFFA9FD13FFA9
%FFAFFFA8FFAFFD04FFC38CC393BC93BC93C3FD04FF2F5A5A30FD045AA8FF
%FFFFA82728522753275228FD04FFA1689A6F9A6F996FA1FD07FFCA939393
%B593B58CCAAFFFA8FFAFFFA8FFA19393CAFD0EFF855A855A305A845AA9FD
%18FFAFFD06FFB593BCBCBC9AC3FD05FFA92F7E5A7E5A7E84FD05FF532753
%FD0452A8FD05FF9A939A939A9A9AFD08FF93B593B593B593B59AFFFFFFAF
%FFFFFFA8B593B593FD0FFFA92F302F302FA9FD14FFAFFFA8FFAFFD07FFCA
%BC93BC93BCA8FD06FFA9535A535A7EFD07FF5252272827A8FD06FFA89A6F
%936F9AA8FD07FFAFC38CB593938DB59393A1FFA9FFA8FFA8B58CB593939A
%FD10FF2F302FFD0DFF9A9AA1FD13FFCABC8CB5CAFD08FFAF2F3030FD09FF
%5321007DFD09FF936893A1FD0AFFCA93B593B593B593C3FFFFAFFFFFC38C
%B593B593B5CAFD0EFF5A5A84307EFD07FFA89A6F9A6F926868A0FD07FFA9
%FD0AFFC393BC9ACAFD08FF5A5A5A7EA8FD07FFA852285252FD08FFC36F9A
%6FCAFD08FFAFFFAFFF9AB58CB5A1FD05FFAFFF93B593B593B58CBCFD0DFF
%A95AA9FFA95AAFFD06FFC36893689393B58D93A8FD43FFAFFFFFFFAFFFCA
%C3CAFD07FFA1B593B593B593B593FD0DFFAFA8FFFFFFA8FD07FF9A6F6893
%93B593BC8CB5A8FD43FFA8FFA9FFA8FD0AFFC38CB593938CB58C8CA1FD18
%FF93936EB5B5B59AFFCACA8CC3FD3BFFC3FD06FFAFFFFFFFAFFD0CFFBC93
%B593BC9BC3A1CAFD17FF9A68689393B58CCA9A93A1BC9AFD3AFFC38CC3FD
%04FFAFFFA8FFAFFFA8FD0BFF9AB5A1CAAFFFAFFFAFFD17FFA1689393B593
%B5C3FFFFFF93C3FD38FFC3FF93B593FD07FFAFFD0EFFCAA8FFFFFFAFFD10
%FFA8FD09FFA893689393938CB5C3CA9AB59AFD04FFCAA1FD09FF7D7D527D
%7EFD0DFFA1BCFD0CFF9ABCA1FD04FFCA93BC9AB59393A8FFFFFFA8FFA9FF
%A8FFAFFFCAFD09FFAFFFA8FFA9FFA8FFAFFD0CFFA852287EFD07FFA16893
%93B593B593B593B593B59ACAC3BD8CC3FD07FF7D27270027002728A8FD0A
%FFCAB593FD05FFBDBCC3FFFFFFBCBCC3BCBCFFFFFF93B593B593B593FD0A
%FFCA93CAFD0AFFAFFFFFFFAFFD0BFFA82728274C0027007DFD06FF686F68
%9393B593B593B58DB593B58CB08C939AFD06FF52F82721270028212700A2
%FD09FFBC8CB5A1FFFFFF9ABCA1BC9AFFA8C3A8A1A1BCCAFF9BB593B593B5
%8CBCFD04FFA8C3A1C39ABC8C9393FD09FFAFFFA8FFAFFFA8FD0AFF7D0000
%2828532F2F28A9FD04FFCA936893689393B593B593BCCAFFFFCA9AB58CCA
%FD05FFA80027212727272128272700A8FD08FF93B58DC3C3C3FFC3CAA1A1
%BCCAFFC3CA9ACA9AFFFFC38CB593B58CB5CAFD04FFCA8CB593B593B593B5
%93FD05FFCABC9AFFFFFFAFFFFFFFAFFD08FFA85300282F5A2F5A5A362FFD
%05FF9A93686F689393B58DB59AFD05FF9ABCFD06FF7D212728282E272700
%27002127FD07FFA8B58D9393BC8CCAA1A19ACA9AFFFFCAA8FFA1C3FFFFA1
%938CB58CB6A8FD06FFBC8CB593938DB58CBCA8FFAFFF9AB58C9393C3A8FF
%A8FFA9FD08FFA82800282F5A2F85A8A8A9307EFD06FF9A68936F9393B593
%B5C3FD0CFF842F5A2F5A305A2F5327282727A2FD07FFBCB593B593B59ACA
%CAFFC3CAFFCACABC9ACAFFFFFFC38CBCBCCAFD08FFC3B593B593B593BCAF
%FFFFFFAFC393B593B593BCA8FD0BFF53F82728362F30A87D27A85A7EFD06
%FFA1936893689393B593B5A8FD0AFF840D362F2F2F5A2F36302F27270053
%FFFFA85277FFFFCA8CB593B593B5CBCAA1939ABC8DB58CBCFFFFCA9A68A1
%FD0CFF93B593B58DB5A1FFA8FFAFFFA8B593B593B58CB5A1FFAFFD08FF7D
%272153305A2FA9FFFFA85A84FD08FF9A689393B593B593CAFD09FFAF2FA9
%A9852F54305A2F2F2828272728FFFF5227FD04FFBC8CB593B593FFFFFF93
%B593B593B58DBCA19368CAFD0DFFCA93B593B59AFFFFFFAFFFFFFF9AB593
%B593B593B5A1FD09FFA92727285A2F302F85845A2F5AFD04FF84A9FFFF68
%6F68B593938CBCCAFD09FF2FA9A853A8592F2F0527002728542827FF7DF8
%7DFD04FFCABD8C938CC3FFFFA1B593938DB593938C8D93FFFFCA9A936F9A
%CAFD08FFCA8CB593FFAFFFA9FFA8FFAFC38CB593938DB58CC3FD09FF5228
%212E305A2F5A2F302F5A2F5A7E855A307EFFFF9A689393B593BCC3FD09FF
%A95AA95252A97D2827282727295A305A28A82728A8FD06FFCABC939AFFCA
%B593B593B593B593B593BCFFC3688C689268CAFD09FFCA93CAFD04FFAFFF
%FFFFA8B593B593B593CAFD09FFA8270027002F30302F5A2F302F7E5A3007
%302F84FFFFA16868B593B5A1CACAFFFFFFAF5A7EFFFF7E0D84CAFFFF5328
%27002728362F5A2F5A522727FD09FFA068A1BC8CB59393689393B593B593
%93689AA1A1A1FD0DFFAFFFA8FFAFFFA8FFAFCA93B58D9393CAFD0BFF21FD
%04275A305A2F5A5AFD04FF852F30A9FFFF9A689393B5BCCACAFD05FF2F30
%7E852F5A2F85845A285327272154305A2F5A302F0053FD0AFFA19393B593
%B593B593B593B593B593CAA8CAA1C3A1FD0FFFAFFFFFFFAFFFFFB58CBCC3
%FD0DFF7E27280027002F2F302F7EFD05FF845AFFFFFF9A6868938DCACAFD
%07FF2F2F2F302F302F302F282F2F29282F542F302F3628214CFD05FFA8A1
%6F939AA193B593938CBCA1C3A1C393938DB59393FD04689AFD05FF5A5A53
%A9FD06FFA8FFAFFFA8FFA1CACAFD10FF52272728275A2F5A2F85FD0AFFA8
%CA93B6FFFFCAC3CAFD05FF305A305A2F5A302F2F5A305A2F5A305A2F5A2F
%280053FD04FFCA9368936E9393B593B593C3CACAC3CACAC393B593B59AC3
%9A936FCAFD04FF30305A5A2F85FD1EFFA8272700282F302F302FA9FD0BFF
%BC8CFFFFFFCABCCAFD05FF2F302F302F5428302F5A2F302F5A2F302FA952
%004CFD04FF9A68939ACAA8A18DB58DBCA1CAC3CAA1CAC3C38DB5936F6F9A
%A1FD05FF5A30A8FFFF5A2FFD20FF5227275A305A2F5AA9FD0BFFC3B59AFF
%FFFF93FD07FF7E5A2F5A2853305A2F5A305A2F5A302F7DA80052FD04FFA1
%C3A8C36F9393B593B5C3CAC3CAC3CAC3CACABC8C939A9A6893A1FD04FF5A
%5AFFFFFFA830A8FD1EFFA82700282F5A2F3059FD07FFA9FD05FFA19393BC
%93C3FD08FFA85A2F2F2F542F302F302F302F2F00277D4C00FD05FFA19368
%689ACA939393CAA1C4A1CAA1C4A1CA9AC36F93A89A6893A8FFFFFF5A54A8
%FFFF8407A9FD06FF84FD18FF5327275A305A5AA9A9FD0DFFCACAC3CAFD06
%FFA8FD04FFA92F5A30362F362F5A2F2F272700FF7E21A8FFFFFFCA936899
%CAFF93BC93BCCACAC3CAC3CAC3CACAFFFFCA68C3FFFFCAFD04FFA92F7EA8
%852F5AFD07FF7EFD18FF7D00272F302FA984FD07FFA8FFAFFD0DFF537DFD
%05FF7E00537EA97EA9A9A80021007DFFFF2853FFFFFFCA689AFFA1689AA1
%939ACAC3C3A1CAC3CACAFD04FF9368FD08FF7E0D302F5AA8FD04FFA984A9
%2FA984A9FD15FF282727542F85A8FD09FFAFFD0BFFA8A8A85352FF7DCBFF
%FFFF520052A8FD04FFA852A8FD04FFA8FD04FFCAFFC36893A8939AFFCAFF
%CAFFCAFD07FFA19AFD08FF7E302F5AFD06FFA87E2F302F7EA9FFFFFFA8FF
%FFFFA8FD0DFF7D00282F3084FD09FFAFFFA8FD0BFF53280027277DA8FFFF
%FFA827F827287DA8FD0EFFCA6868A1A168CAFD17FF5A2F305AFD08FF5A2F
%5AFFFFFFCA6893FFFF7668A1FD0EFFA85A30FFFFFF7EAFFD14FF7D2700A8
%FD06FF7E28212700FD0FFFCA93A1FF689AFD12FF5A5A7EA9A9FF305A2FAF
%FD07FFAF5AAF5AAFFFFFFFA168CAFF9393FD0AFFA1FD05FF5430A9FFFFFF
%5AAFFD13FF5352774CFD07FF7D280027A8FD08FFCACAFD05FFCAFFA168A1
%FD0DFFA9FD04FF842F302F302F5A2F307EFD07FF84FFFFFF84FD04FF9A6F
%A168FD0AFFCABCFD05FFA92F7EFFFFA95AA9FD12FFA97DFFFF7DA8FD07FF
%A853007DFD08FF9AC3FD07FFC36FFD0DFF845AFD08FF845A2F5A2F302F5A
%5A84FD09FFC39ACAA19368A1A8C39AFD04FFCAFFFFCA93FFFFFFCAFFFFA9
%2F302F5AA8FD09FFA8FFA8AFA8A9A8AFFD11FFA87DFD05FFCAFFFFBC9AFF
%FFFFCAFFFFFFA8FD05FFAFFD08FF7E075AFD08FF5A302F7E847E2F305AFD
%09FF6F68689368936F6F6868A8FFFFFFC39AC3BCB59AC3BCCAFD04FFA8AF
%FD09FF7E2F5A305A2F5A30307EFD17FFCABDBCC393BCBCBC9AFD13FF2F5A
%2F7EFD07FF5A2F5AA9FFFFFFAFFD0AFFCACAFFA1936FA1FFFFA8FD05FFCA
%93B5939393CAFD10FF5A302F542F302F542FA9FD0BFFCAA1FFA2FD09FFCA
%C393B58CB5A1FD09FFA9FFAFFFA9FD05FF7E2F2F5A5AAFFD06FF2F302FFD
%11FFCA6F9ACA68CAFD09FF8DB593FD12FF852F5A2F5A305A2F5AA9FD08FF
%CA9ABC93CAAF5321537DFD08FFC38CB5A1FD0BFFAFFD08FF857E5A7EFD07
%FFA85A2F7EFD10FFCA9968FFFF9368CAFD07FF9AB5A1B5A1FD11FF5A302F
%302F542F302FFD07FFA8BC8C938CC3AFFFA828F82128A8FD05FFCA8CC39A
%B5CAFD0BFFA8FD09FF2F5AAFFD06FF842F307EFD09FF7E84FD06FF6F9AFF
%FF9A93A1FD06FFCABCCAFFCABCCAFD10FF852F5A2F5A305A2F5AFD06FFCA
%BC93B593BCFFFFAFFF84FD0427A8FD04FF9AC3FFFF9AC3FD15FF7E2FAFFD
%06FF5A3630FD08FFA954307EFD13FFCACAFFFFFFCACAFFFFFFC39ABC9AC3
%CAFD07FF5A302F302F5A2F3053FD05FFCA938CB593B59AFFAFFFAFFF2827
%002700A8FFFFFFCAFD04FFA8FD15FF5A2F53FD06FF5A2F5AFD06FFA85A2F
%302F85FD1BFFCAB58DBC9ABC8CB6CAFD06FF852F5A305A2F5A2F7EFD05FF
%BC93B593B593CAAFFD04FFA80028272727FD1EFFA92F3084FD05FF30307E
%FD07FFA97E2F3084FD1AFFA18D9AFD04FFCA9393A8FD05FF7E2F2F542F30
%2F305AFD04FFC38CB593938CB5A8FFA8FFA9FFA8280027002152FD16FFA8
%A8FD05FFA8542F5AA8FFFFFF84302FA9FD07FFAF2F842FA9FD0BFFCAA1FD
%0CFFCAB5BCFD07FF93BCFD06FF2F36305A2F3630AFFD04FF93B593B593B5
%9AFFAFFD05FF282727282728A8FD07FF7E53FD0CFF0052A8FD05FF5A302F
%7EFFFFFFA92F5AFD07FFA92F85FD0EFFC3C3FD0CFFB69AFD08FFCA8CC3FD
%05FFAF5A5A2F5A7EFD05FFA89393B593B58CBCAFFFA8FFAFFFAF53002700
%28007EFD05FFA22827F87DFD0AFF5327002753FD04FFA92F302F7EFFFF5A
%305AFD05FFA87E0D5AFD0CFFCAFFFFC393FFFFFFCAFD07FFCA8DFD0AFFBC
%93FD07FFA95A84FD06FFCA8DB593B593B59AFFFFAF5AFFFFFF5327272821
%2777FD05FF2821272727FD0AFF280028007DFD05FF7E2F5A2F5AA95A2FA9
%FD04FF7E5A0D7EFD0DFFC393BC93B59ABC9ACAFD07FF93BDFD0AFF9B8DA1
%FD07FF2FA9FD06FF9BB593938DB58CC3AF842F302FA9FF53002700270052
%FD06FF2727000053FF7D7D4C525252537D00270052FD06FFA85A2F302F30
%2F307EA97E5A2F302F5AFFFFA87D53A27EA8A8FD06FFCA93B58D93A1FD09
%FFB5CAFD0AFFCA8CCAFD06FFAF5A84FD06FFC38DB593B593B59BFFA9302F
%5AFFFF5327272827284CFD06FFA827282728282700282127002721282128
%A8FD07FFA8302F5A305A2F5A2F302F5A2F85FD04FF27270028272827A8FD
%05FFCA8CB593FD09FFCA93FD0BFFCA939AFD06FFAF2FA9FD06FFA1B593B5
%93B58CC3AFAF5A5A5AFFAF52002821270053FD07FF7E0027002721270028
%21270028212727A8FD08FF84302F5A2F302F5A2F3053AFFD05FF4C002800
%270027A8FD05FF93C3CAB5A1FD08FF9ABCFD0CFF93C3FD06FFA93084FD06
%FFCA8DB593B593B59AFFA9FFFFFFAFFF27272128272777FD07FF7D282728
%21282728212827282128272700A8FD08FF84302F5A2F302F5AA8FD07FFA2
%93686F69707EFD05FFC3C3FFFFCABCFD08FFBC93FD0BFFA8B59AFD06FFA9
%2FA8FD06FFA8938CB593938CBCAFFFA8FFAFFF7D270027002700A8FD06FF
%7D210027002700270027002700270027002700A8FD08FFA85A2F5A5AA9FD
%0AFF9AC39AC3C3FD0BFFCAFD08FF93BCFD0BFFCB8DC3FD06FFA93084FD07
%FF9AB593B593B593FFAFFD04FF7D00282728274CFD06FFA8272128272827
%287DFFA8A9522721282728272827FD09FFAFFD0FFFAFFFCAFD14FFCA9393
%BC9ABC9ABC9ABC9ABC9AC39AB5A1FD06FFA92FA9FD07FFCA8CB593B58DB5
%A8FFA8FFFFAF2727212700277DFD06FF52002700272727007DFFFFFF5200
%2700272127002752FD17FF9ABC93B5C3FD14FF936F214B454B454B454B21
%4B216F8CCAFD06FF8430A8FD08FFC38CB593B593CBFFFFAFFF7D27212827
%2728FD06FFA80028272727FF522721FFFFA80027A8A8002827282127A8FD
%15FFC3B58DB58CFD14FFCAB58D4B0005000500050027216F93B5A8FD04FF
%AF5A5A075A5AA9FD06FFCBBC8CB59393A1FFA9FFA8280027002727CBFD06
%FF5221002700A8FFFF270052FF280052FFFF5300270027F853FD0EFFCBFD
%06FFC38DBC9AC3FD15FF9AB5B5B56F704B706F9393B5B5B593FD05FF7E30
%7EA97E3084FD08FFBC8DB593BCFFFFFF7D0028212728FD08FF282128007D
%FD04FFFD042728FD04FF282728272828A87D7D7DFD0BFFCAC3C3CACAFD1B
%FFBC8DB593B5B5B593B593B593B58DBCFD05FF5A5AAFA8FF2FA9FD09FFC3
%93938CCAFF7E0027002752FD04FF7D5277537D2127002753A8A8FF7E2728
%7D2152FFFFA27E2727212700270021F852FD0BFFCA8C938DB593BC9AC39B
%CAFD15FF9AB593B593B593B593B593B593B5BCFD05FF2F5A2F5A2F3084FD
%0BFFC3BC9BAF27284C7EA8FD05FF272700270028272827282127212727FF
%FF7E002821270027272827282128272752FD0CFFC38CB58DB593B58CB593
%BC9AC3C3CACAFD0FFFBC8CB593938CB59AB58CB593938CC3FD04FFAFAFA8
%A9A8A984FD06FFCAA8FD07FFA8FFFFFF7DFD05FFA9280027002700270027
%0027002827277DFF5227212700272127002700270021F853FD0CFFA8C39A
%BC93B58C938CB58C938CB58C9393BC9AC3A1CACAFFCAFD06FFBCB593B593
%B59ACA9AB593B593B5CAFD11FF9AFD0CFF28A8FD05FF0027272827282728
%277EA8FFFFFF2827212753FFFFFFA9530028272821FD047DFD0FFFAFFFCA
%C39ABC93B58DB593B593B593B58CB593B593FD07FFC38CB593BCA1CAC3CA
%A1BC93B593FD0FFFA1C3A193A1CAA1FD08FFA900A8FD04FFA87D7DA8A8A8
%002721217DFFFFFF7D2727520028A8FFFFFF282700280027A8FD13FFAFFF
%AFFFA9FFCAC39ABC93B58CB58CB58DB58CBCFD07FFC3B593B593C3C3CACA
%C393B593BCFD10FF9A93689393CAFD08FFA8277DFD0AFF2800282152FFFF
%FF28007EFF520052FFFF7E272728212828FD0BFFA8FFA8FD07FFAFFFFFFF
%7EAFAFFFFFA97DA19ABC93B58DB5C3FD07FFC38C938DB593CAA1CA9A938D
%B59AFD05FFA8FFA8FD09FF6F6868FD09FFA8520028A8FD09FF5221002700
%7DFF770027A8FF7D21F87DFF4C002700270053FD05FFA8274C2728002721
%272128285253A8A8FFAFFFA82F595AA8FF2F5A3085AFFFA8CA9AFD08FFC3
%B593B593BCC3BCC3C393B593C3FD06FFA8FFA8FD07FFA89ACA9AA1FD08FF
%5200280053FD09FFA800282728277D272752FFFFFF522727520028272827
%28A8FD06FF52002821282728212827270027212853A9FFFF7E855AFFFF85
%845A84FD0DFFCA8DB593B593B58CB593B593B5C3FD07FFA8FD08FFA1A8FF
%CAA1FD06FFA84C00282127007DFD09FF5200282127002700A8FFFFFFA800
%2700270028212128FD07FF7E2700270028212700282127002700210059A8
%FFAFFFFFAF2F845AAFAFFD0CFFCAB593B593B593B593B593B593FD09FFC3
%CAFD10FFA82800270028272700A2FD08FFA827002827282128527D7D7D4C
%2821282728272827A9FD08FF522727282128272800272728212827280028
%7DFFFFFFA85A5A30AFFFAFFD0BFFCA8CB593938CB593938CB58CB5CAFD07
%FFA1B58DB593BC9AC3A8FD09FFA8270028285228282121F8A8FD08FF7D00
%0027002700270000F827002700270027007EFD09FFA8002700270027004C
%5228002700270027002752A8AFFFA9A97EFFAFFD05FFA8A8FD05FFCAB593
%B593B693B593B693B59AFD08FFC38CB593BCBCC3C3FD0AFF7E7DFD04FFAF
%A9FF7E7D52FD09FF7D28272827282728272827282728272821A8FD0BFF7D
%00282728272752FF2728272827282728272721537DA9A9FFAFFFA8A97E7D
%52284CFD06FFA1FD04CAFFCACACAFD0BFFA1CACAFD14FF7E0785FD04FFA8
%FD08FF7D00282127002821270028212700280027A8FD0BFFA82800270027
%217DA87D0027002821270028212700272128272827270027002100A8FD19
%FFA884FD16FF845AA8FD0DFF272721282727002721270027002821280052
%FD0CFF7D2727274C5352A8277D5227212827282128272821282727002827
%282128214CFD04FFCAA8FFA8CAFD10FFA8A800A8FD08FFA8FD07FFA8FFA8
%A87D7D537D5253525353FD07FF2727002152FF7D532852285252A87D2700
%27F853FD0CFF282700537D2753277D520027002700270027002700270027
%0027002700217DFD04FF68C3FF9A93FD11FFA82728FD0EFFA85252272827
%282728005228272828FD07FF7D212700A8FD0AFF5227277DA8FD0CFFA927
%28007EA8A8A853002827282728272827282728272827282728272827FD05
%FFA16FCA68CAFD11FF7D00007DFD05FFAFFFA8FD05FF7D287D277DA9007D
%A827A87D28A852FD08FFA82728FD0BFFA852FD10FF770027007DA8770028
%212700282127002821270028212700282127007DFFFFFFCACACA9A68A1CA
%CACAFD0FFF53272128FD0EFF52A828527D2828532753277D537DFD0AFFA8
%FD1DFFA82800270028002700282727212827282128272821282728212827
%27A8FFFFFFA1689A6F686F9368CAFD0BFFA95A7EA8520027007DFD04FFA8
%FFAFFD06FFA8007D21FF52537D527E285228A8FD17FFA9A95A5A2F5A2F5A
%2F5A2F5A5A84A8FFFFFF7D28282821282728212721270027002700270021
%00270000F80028FD04FFCAFFFF9A6F9AFD0CFF845A2F5AAFFF2828272827
%FD0EFF527D7D7EA853A87DA852FF52FD16FFAF5A5A2F362F302F542F302F
%5A2F302F5A5AA9FD0AFFA8FFA8FFFD06A87DA87EA87D7E7DA9FD06FF9A6F
%FF68A1FD08FFA87E2F302F30A8FFA8270028210053FD0DFF7E285252A153
%527E597E7D53FD14FFA85A2F302F302F54FD072F5A2F302F302F5A84FD20
%FF6FCAFF9A9AFD07FF5A5A2F5A2F307EFFFFA8052800280528A8FD0DFF52
%4B214C2728272827287DFD13FF5A362F5A2F5A305A2F5A2F542F5A2F5A2F
%5A305A2F5A2F305AFD0AFFC3CAFD14FFCAFD07FFA8842F302F542F302FFF
%FFFF5327214B456F689BFD0EFF93938D9393938C93A1FD08FF84A8FD09FF
%532F2F542F302F542F302F542F302F542F302F542F302F542F302FA9FD08
%FF6FCAFD1BFFA95A2F5A2F5A305A2FA9FFFFAFC393FD05B593FD0DFFC4B5
%93B593B58DBCC3FD09FF5AAFFD08FF54302F5A305A2F5A305A2F5A305A2F
%5A305A2F5A305A2F5A305A2F5A2FA9FD04FFA1C3A1939AC3A1FD18FFA830
%2F5A2F302F5A2F5AA9FFFFFF93B58CBC93B593939AFD0CFFC38CB58CB59A
%CACAFD07FFA8FFFF307EFFFFFFA9FFFFFF2F302F302F5A2F302F5A2F302F
%5A2F302F5A2F302F5A2F302F5A2F302F302F84FD04FFA193686E9AFD18FF
%A85A2F302F5A2F5A2F307EFFFFFFA8B68CBCFFC48CB593B5CAFD0BFF9BB5
%93C3CAFD09FFA95A2F5A2F5A5A5A7EFFFFFF5A302F5A305A2F5A305A2F5A
%305A2F5A305A2F5A305A2F5A305A2F5A305A2F5A2FA9FD04FF99936FFD18
%FFA8300730548484A984A97EAFFFFFA8CA93CAA8FFFFCA9AB58CA1FD0BFF
%C3A1FD05FFCACA9AFD05FFAF842F302F5AA8FFFFFF7E302F302F542F302F
%542F302F542F302F542F302F542F302F542F302F542F302F302FA9FFFFA1
%9AA8A19AFD17FF5A54A9A9FD0BFFA1B5C3FFFFFFCABC93B593FD0FFFCACA
%BCBC8CB5FD07FF5A2F30A8FD04FF5A2F5A2F5A305A2F5A305A2F5A305A2F
%5A305A2F5A305A2F5A305A2F5A305A2F5A305A2FFFFFCACAFFFFCAFFAFFD
%14FFA984FFFFFFAFFFA8FFAFFFA8FFFFFFA8C38CB5CAFFFFC38CB59393A1
%FD0AFFCAA1C393B58CB593B58CCAFD05FF842FAF5A5AFFFFFF842F5A2F30
%2F5A2F302F5A2F302F5A2F302F5A2F302F5A2F302F5A2F302F5A2F302F5A
%2F302FFD06FF842F5AA8FD16FFAFFFFFFFAFFD07FF9AB593FF9ACAC3B593
%B593BDFD0AFF93B58CB593B593B593BCCAFD05FF5AFFFFFF5AA9FFFF5430
%2F5A305A2F5A305A2F5A305A2F5A305A2F5A305A2F5A305A2F5A305A2F5A
%305A2F5A30307EFD05FF7E302F5AFD04FFA9FD0CFFAFFFA8FFA9FFA8FFA9
%FFA8FFAFFFFFFFA8BC8CB593B58CB593B58DB593FD09FFA1B593938CB58C
%B59ACAFD06FFA8FD05FFA8FF84302F302F542F302F542F302F542F302F54
%2F302F542F302F542F302F542F302F542F302F542F30A8FD04FF7E2F302F
%A9FF842F542F5AA8FD0AFFAFFFFFFFAFFFFFFFAFFD07FF93936F936F706F
%6F4B704B4B7DFD08FFCA93B58DBCBCCAFD11FF852F5A2F5A305A2F5A305A
%2F5A305A2F5A305A2F5A305A2F5A305A2F5A305A2F5A305A2F5A305A2F5A
%FD04FF84302F5A7E7E2F5A30305AFD0AFFAFFFA8FFAFFFA8FFAFFFAFFFA8
%FFFFFF7D27002800270028002700280053FD08FFA1B59AC3CAFD05FFCAC3
%CAFD0BFF2F302F302F5A2F302F5A2F302F5A2F302F5A2F302F5A2F302F5A
%2F302F5A2F302F5A2F302F5A2F302FA9FD04FF2F302F542F302F302FAFFD
%0DFFAFFFFFFFAFFFFFA86F9AFFFFFF7E00282128272821282728212828FD
%08FFCACAFD05FFC3C393B593FD0BFFA95A2F5A305A2F5A305A2F5A305A2F
%5A305A2F5A305A2F5A305A2F5A305A2F5A305A2F5A305A2F5A303053FD04
%FFA92F5A2F5A2F302FFD0CFFA8FFA9FFA8FFAFFFA193686868FFFFFF5227
%002700270027002700270027A8FD07FFCAFFA8CA9ABC93B58C938CB5CAFD
%0AFFA92F302F542F302F542F302F542F302F542F302F302F302F542F302F
%542F302F542F302F542F302F542F2F7EFD04FF7E2F542F7E7EFD10FFAFFF
%FFCA939368936E93A1FFA853212827282728272827282728007EFD07FFBD
%93B593B593B593B593B58DCAFD0AFF7E302F5A305A2F5A305A2F5A305A2F
%5A305A2F5A2F5A5A5A2F5A2F5A305A2F5A305A2F5A305A2F5A305A2F5AFF
%FFFFAF545AFD11FFA8FFAFFFAFA168686893689368A1FFA9272721270028
%212700282127002752FD07FF93938DB593B593B593938DBCCAFD0AFF7E2F
%302F5A2F302F5A2F302F5A2F302F5A2F302F84FFFFA85A2F302F5A2F302F
%5A2F302F5A2F302F5A2F302FA9A85A2F305AFD12FFAFFFFFA168936F9368
%936F936FFFA8282128272821282728212827280052FD06FFCAB593B593B5
%93B58CBCC3FD0DFF5A5A305A2F5A305A2F5A305A2F5A305A2F5A2F5AFF7D
%52FFA95A2F5A2F5A305A2F5A305A2F5A305A2F5A305A2F5A2F5A2FAFFD11
%FFAFFFAF9A686F6893686F68936893A8A800270027002700270027002700
%2727FD06FFCA8CB593938CB59AC4CAFFFFFFA8FD0AFF7E2F302F302F542F
%302F542F302F542F302F307E7E275252FF2F302F302F542F302F542F302F
%542F302F542F302F542F5AA9FD13FFA168936E936F9368936F939AFF7D00
%0028212700282728212827282752FD06FFC3B593B59ACACAFD05FFCAC4FD
%0BFFAF5A5A2F5A305A2F5A305A2F5A305A2F5A2F7ECAFFFFFFA95A2F5A2F
%5A305A2F5A305A2F5A305A2F5A305A2F5A303084FD13FFA1689368936893
%9AA1A8FFA8CAA8A8537D7DA87DA87EFD04A8FFA8A8A8FD06FFC393C4CAFD
%05FFA8C39AB593FD0DFFA87E2F302F302F5A2F302F5A2F302F5A2F85FFFF
%AF5A292F2F302F5A2F302F5A2F302F5A2F302F5A2F302F305AFD14FFA092
%68936893A1FD22FFCAC3C393B58CB593B5CAFD0BFFAFFFAEFF84845A5A2F
%302F5A2F5A305A2F5A2F5A5A5A2F5A2F5A2F5A2F5A305A2F5A305A2F5A30
%5A2F5A30302FFD07FFC3FD0EFF6F6E6893A1FD07FFA8FD15FFCACAA1C393
%B593938CB593938CB58CC3FD0AFFAFFFA8AFAFFFA8FF84845A5A2F302F30
%2F302F302F302F302F302F542F302F542F302F542F302F542F302F302FA9
%FD06FFCABCCAFD0DFFC368939AFD07FFA8FD17FF93B58CB593B593B593B5
%8DBCBCCAFD0EFFA8FFA8FFFFFFAEFFA8FFA8A984845A7E5A5A545A305A2F
%5A305A2F5A305A2F5A305A2F5A305A2F3630AFFD08FF93FD0FFF9A68FD07
%FFCFFFA8FD15FFCAB593B593B593B58CB593C3CAFFFFFFCAFD0BFFA8AFAF
%AFA8FFA8AFA9AFAFFFA8FFAFAEAFFFA8FF5A302F302F5A2F302F5A2F302F
%5A2F302F302F305AFD06FFC39AC39A939AC39AC3FD06FFA9537D7DA8776F
%A8FFA8FD1CFFCA93B593B58CB593C3CAFD05FFCAFD09FFA9A9AFFFA8FFA8
%FFFFFFAFFFA8FFFFAFAFFFA8FFA8FFA85A2F5A305A2F5A305A2F5A2F5A2F
%5A305A2F85A9FD08FFCA93B593B593CAFD07FFA828F800F8270027002721
%282752527D52FD047DA87EA8A8FFA8FD0BFFC3B593B6BCC3CAFD05FFCACA
%9ABCFD09FFA9075A5A84A8AFA8FFA8FFAFA8A8FFA8FFA8FFAFA859302F30
%2F542F302F302F302F302F302F302FFD0CFFCA8CB593FD0AFFA853527D52
%534C52284C272827270027002100270027212827A8FD07FF522853527645
%70767E84A8A8A8A2C39AB58DB593FD0AFF852F302F5A547E7E85A8AFA8FF
%A9A9A8A97E5A2F5A305A2F5A2F302F5A305A5AA9A9FF845A3030A8FD0BFF
%BCB6C3B5C3FD0AFFA87728535253527D527D527D52535277525228522852
%217DFD07FFA8002700270027002700270027002700272127214B4C537DFD
%08FFAF7E5A2F302F2F2F302F302F302F3007302F302F302F542F5A5A8484
%AFFD08FF84A9FD0AFFCABCCAFFCABCCAFD0AFFA852000000210027002700
%27212721282728274C277DFD08FF7D272127002721270027212700270027
%002800270027004CFD0CFFA8AFA8A97E8584857EA984857EA984A9A8FD1D
%FFCAFFFFFFCAFD0DFFA8537D777D537D777D537D537D537D537D537DA8FD
%08FF7D275228522852285228522852285228522852285228524CFD42FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
userdict /lv1Fix true put
userdict /_contoneDevice true put
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps true put
userdict /_forceToCMYK true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(UnitCell class) (Artlandia SymmetryWorks Plug-in) (Artlandia SymmetryWorks.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(NSD-FiT4 Trail class) (FiT4 Live Trail) (FiT4E_21_Live Trail.aip)
%AI8_PluginGroupInfo
(NSD-FiT4 Tiling class) (FiT4 Live Tiling) (FiT4E_22_Live Tiling.aip)
%AI8_PluginGroupInfo
(NSD-FiT4 DropShadow class) (FiT4 Live Shadow) (FiT4E_23_Live Shadow.aip)
%AI8_PluginGroupInfo
(NSD-FiT4 Reflections class) (FiT4 Live Reflections) (FiT4E_24_Live Reflections.aip)
%AI8_PluginGroupInfo
(NSD-FiT4 Neon class) (FiT4 Live Neon) (FiT4E_25_Live Neon.aip)
%AI8_PluginGroupInfo
(NSD-FiT4 Generation class) (FiT4 Live  Generation) (FiT4E_26_Live Generation.aip)
%AI8_PluginGroupInfo
(NSD-FiT4 Galaxy class) (FiT4 Live Galaxy) (FiT4E_27_Live Galaxy.aip)
%AI8_PluginGroupInfo
(NSD-FiT4 Frame class) (FiT4 Live Frame) (FiT4E_28_Live Frame.aip)
%AI8_PluginGroupInfo
(NSD-FiT4 Explosion class) (FiT4 Live Explosion) (FiT4E_29_Live Explosion.aip)
%AI8_PluginGroupInfo
(NSD-FiT4 Emboss class) (FiT4 Live Emboss) (FiT4E_30_Live Emboss.aip)
%AI8_PluginGroupInfo
(NSD-FiT4 Cutout class) (FiT4 Live Cutout) (FiT4E_31_Live Cutout.aip)
%AI8_PluginGroupInfo
(NSD-FiT4 Circle class) (FiT4 Live Circle) (FiT4E_32_Live Circle.aip)
%AI8_PluginGroupInfo
(NSD-FiT4 Border class) (FiT4 Live Border) (FiT4E_33_Live Border.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(VMGradTexPluginGroup1) (VirtualMirrorGT) (GradientTexture.aip)
%AI8_PluginGroupInfo
(VM Zoom Lens) (VirtualMirrorLens) (Zoom Lens.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
4 Bn
%AI5_BeginGradient: (Linear Gradient 1)
(Linear Gradient 1) 0 2 Bd
[
<
00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F20212223
24252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F51
52535455555658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B
7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F9090919293949495969697989899
9A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAAB
ABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2
>
<
00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C
1D1D1E1F202122222324262728292A2B2C2D2E2F2F30313233343536373838393A3B3C3D3E3F4041
434445464748494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F6061626364646566676869
6A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A
8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3
A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC
>
<
00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C
1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142
434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566
676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F808181828383
8485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A
9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B
0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B
3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587
898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9
D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1
B0AFAEADADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A
898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766656463
6261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C
3B3A393837363534333231302F2E2D2C2B2A29282726252423
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A89
8887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261
605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A39
3837363534333231302F2E2D2C2B2A29282726252423222120
>
4 %_Br
[
0 0 50 100 %_BS
%_0 0 50 100 Bs
1 0 50 0 %_BS
%_1 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Linear Gradient 2)
(Linear Gradient 2) 0 7 Bd
[
<
E0E0E0E1E1E1E2E2E2E3E3E4E4E4E4E4E5E5E5E5E6E6E6E6E7E7E7E7E7E7E7E7E7E7E7E7E8E8E7E8
E7E7E8E8E8E7E7E7E7E7E7E7E6E7E6E6E7E6E6E5E5E5E5E4E4E4E3E3E2E1E2E1E0E0E0DFDFDEDEDE
DDDDDCDCDBDBDAD9DAD9D8D8D7D6D6D5D4D5D4D4D3D2D2D1D1D0CFCFCECECDCDCCCCCBCACAC8C8C8
C7C7C6C6C5C5C4C4C4C3C3C2C2C2C2C1C1C1C0C0C0C0
>
<
8688888A8C8C8E90909294949698989A9C9C9E9EA0A2A2A4A6A6A8A8AAACACAEB0B0B2B2B4B5B5B7
B7B9BBBBBDBDBFBFC1C2C3C4C4C6C6C7C9C9CBCBCDCDCFCFD1D1D2D2D4D4D6D6D7D7D9D9DADBDCDC
DEDEDFE0E1E1E3E4E5E5E7E7E8E8E9EAEAECECEDEDEEEEEFF0F1F1F2F2F2F3F3F5F5F4F6F6F5F7F7
F7F8F8F8F8F9F9F9FAFAFAFAFBFBFBFAFBFCFCFCFCFC
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000002020202020103030303030303040404040404
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000001010101010101010101010101
>
<
000102030405060708090A0B0C0D0E0F10111213131415161718191A1B1C1D1E1F1F202122232425
26272728292A2B2C2D2D2E2F3031323233343536373738393A3A3B3C3D3E3E3F4041414243444445
4646474849494A4B4B4C4D4D4E4F4F50515152525354545555565757585859595A5A5B5C5C5D5D5D
5E5E5F5F606061616162626363636364646465656565
>
<
7170706F6E6E6D6C6C6B6A6A696868676666656564636362616160605F5E5E5D5C5C5B5B5A595958
5857565655555454535252515150504F4E4E4D4D4C4C4B4B4A4A4949484847474646454544444343
4242414140403F3F3E3E3D3D3C3C3C3B3B3A3A393939383837373736363635353434343333333232
32313131313030302F2F2F2F2E2E2E2E2E2D2D2D2D2D
>
<
BBBBBABAB9B9B8B8B8B7B7B6B6B6B5B5B4B4B4B3B3B2B2B2B1B1B0B0B0AFAFAEAEAEADADACACACAB
ABABAAAAA9A9A9A8A8A8A7A7A7A6A6A6A5A5A4A4A4A3A3A3A2A2A2A1A1A1A0A0A09F9F9F9F9E9E9E
9D9D9D9C9C9C9C9B9B9B9A9A9A9A9999999898989897979797969696969595959594949494949393
93939392929292929291919191919191909090909090
>
4 %_Br
<
B2B3B3B4B5B5B6B7B8B9BABBBBBCBDBEBEBFBFC0C1C1C2C2C3C3C4C5C6C6C7C8C9C9CACBCBCCCDCE
CECFD0D1D1D1D2D3D4D4D5D5D6D7D7D8D9D9DADBDBDCDDDDDEDEDFDFE0E0
>
<
252628292B2C2E2F303233353638393B3D3E3F414344464847484A4C4E4F505254555759595A5C5D
5F6162646666676A6B6D6F6F707274767678797B7B7D7F7F818282848686
>
0
0
0
<
ADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796969594939291908F8E8D8C8B8B8A8988
8786858483838281807F7E7E7D7C7B7A7A79787777767575747373727171
>
<
EEEDECEBEBEAE9E8E7E6E6E5E4E3E2E1E1E0DFDEDDDCDCDBDAD9D8D8D7D6D5D5D4D3D2D1D1D0CFCE
CECDCCCBCBCAC9C9C8C7C6C6C5C4C4C3C2C2C1C0C0BFBFBEBDBDBCBCBBBB
>
4 %_Br
<
8182838384858687878788898A8A8B8C8D8D8D8E8F90909091929393939495959596979798989999
9A9B9B9B9C9D9D9D9E9E9F9F9FA0A1A2A2A2A2A3A3A3A5A5A6A6A6A7A7A8A9A9A9AAAAABABACACAD
ADADADADAFAFAFAFB0B0B0B0B1B1B2B2B2B2B3B4B3B4B4B4B4B4B5B5B5B5B5B5B6B6B6B6B6B6B7B7
B7B7B7B7B7B7B7B7B8B8B8B8B8B8B8B9B9B9B8B8B8B8B8B8B8B8B8B8B8B8B8B8B8B8B8B7B7B7B7B7
B7B7B7B6B6B6B5B5B5B4B4B4B3B3B2B2
>
<
01010000010100000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000002020202010101030303
030303030404040404040404050606060606060707070707070709090909090909090A0A0A0A0B0B
0B0D0D0E0E0E0E0E10101010101010121212121212131315151515151515171717171818181A1A1B
1B1B1B1C1C1E1F1F2020202123242425
>
<
FDFCFBFAF9F8F7F6F5F4F3F3F2F1F0EEECEBE9E7E6E4E2E0DEDDDDDBDAD9D8D7D5D4D3D2D1CFCECD
CBCAC8C7C6C5C4C3C2C0BFBEBCBBBAB8B7B6B4B3B1B0AFADACABA9A7A6A5A3A2A09F9D9C9A989795
9492918F8E8C8A8887858482807F7D7B7A7877747371706E6D6B6967656362605F5D5B5A58575553
524F4E4C4A48474542403F3D3C3A38363433312F2E2C2A27262422201F1D1B1917151312100E0C0A
09070504030000000000000000000000
>
0
<
8B8A898988878685858483828181807F7E7D7D7C7B7A7A7978777676757473727271706F6E6E6D6C
6B6A6A6968676666656463626261605F5F5E5D5C5B5B5A5958575756555453535251504F4F4E4D4C
4B4B4A494847474645444443424140403F3E3D3C3C3B3A393838373635343433323130302F2E2D2C
2C2B2A292928272625252423222121201F1E1D1D1C1B1A191918171615151413121111100F0E0E0D
0C0B0A0A090807060605040302020100
>
<
C5C5C5C5C4C4C4C4C4C4C4C3C3C3C3C3C3C3C3C2C2C2C2C2C2C2C1C1C1C1C1C1C1C0C0C0C0C0C0C0
C0BFBFBFBFBFBFBFBEBEBEBEBEBEBEBDBDBDBDBDBDBDBCBCBCBCBCBCBCBCBBBBBBBBBBBBBBBABABA
BABABABAB9B9B9B9B9B9B9B9B8B8B8B8B8B8B8B7B7B7B7B7B7B7B6B6B6B6B6B6B6B6B5B5B5B5B5B5
B5B4B4B4B4B4B4B4B3B3B3B3B3B3B3B2B2B2B2B2B2B2B2B1B1B1B1B1B1B1B0B0B0B0B0B0B0AFAFAF
AFAFAFAFAFAEAEAEAEAEAEAEADADADAD
>
<
3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263646566
6768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E
8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6
B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDE
DFE0E1E2E3E4E5E6E7E8E9EAEBECEDEE
>
4 %_Br
<
0000010102020303040405060607070809090A0C0C0D0E0E10111212131515161719191A1B1C1C1E
1F202121232425262628292A2B2B2C2E2F303231333435373839393A3B3C3D3E3F40404243444546
47494A4A4B4C4D4E4F515253545556565758595A5B5C5D5E60616262636566676868696A6B6C6D6E
6F707172737475767778797A7B7C7D7D7E7F8081
>
<
41414040404040403F3F3F3E3E3E3E3D3D3D3C3C3C3B3B3B3A383838383737373736363635343434
333332323231313030302F2F2E2E2E2D2C2C2B2B2A2A282727262626252524242323232222212120
201F1F1F1E1E1D1D1C1B1B1A1A191717171616151414131312121111100F0F0E0E0E0D0D0C0C0B0A
0A0A090908060605050504040403030302020201
>
<
FCFCFDFDFDFDFDFDFDFDFEFEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFDFD
>
0
<
FFFFFEFEFDFDFCFCFBFBFAF9F9F8F8F7F6F6F5F4F4F3F2F2F1F0EFEFEEEDEDECEBEAEAE9E8E7E7E6
E5E4E3E3E2E1E0DFDFDEDDDCDBDBDAD9D8D7D6D6D5D4D3D2D1D0D0CFCECDCCCBCAC9C9C8C7C6C5C4
C3C2C1C1C0BFBEBDBCBBBAB9B8B7B6B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A5A4A3A2A1A09F
9E9D9C9B9A999897969594939291908F8E8D8C8B
>
<
C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2
C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3
C3C3C3C3C3C3C3C3C3C3C3C3C3C3C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4
C4C4C4C4C4C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5
>
<
0E0E0E0E0F0F0F0F1010101011111111121212121313131414141515151516161617171718181819
19191A1A1A1B1B1B1C1C1C1D1D1D1E1E1E1F1F202020212121222222232324242425252526262627
2728282829292A2A2A2B2B2B2C2C2D2D2D2E2E2F2F2F303031313132323333333434353535363637
3737383839393A3A3A3B3B3C3C3C3D3D3E3E3F3F
>
4 %_Br
<
01010100000101010100000101010000000101010000000101000001010100000101010000000001
010000000101000000
>
<
817F7E7D7B7A79797776747371706F6D6C6B69686765646261605F5D5C5B59585755545352504F4E
4C4B4A484745444341
>
0.988235
0
<
F6F6F6F7F7F7F7F7F7F8F8F8F8F8F9F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFCFDFDFDFDFD
FDFEFEFEFEFEFFFFFF
>
<
9293949596979898999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8
B9BABBBCBDBEBFC0C1
>
<
1E1E1D1D1D1C1C1C1B1B1B1A1A1A1A19191918181817171716161515151414141313131212121111
111010100F0F0F0E0E
>
4 %_Br
<
02020202020201010101010101010101010101000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000010101010101010000000000000000000000000000000000000001010000
00000000000000000001010101010101010101010101010101000000000000000000000000010101
01010101010101010101000000000000000000000001010100000000000000000000000000000000
0000010101010101010101010101010101010101010101010101010101010101010101010101
>
<
FDFDFCFCFBFBFAFAF9F8F8F7F7F6F5F5F4F4F4F3F2F1F0F0EFEEEDEDEDECEBEBEAE9E8E8E8E7E6E5
E4E3E3E3E2E1E0E0DFDEDDDCDCDBDAD9D9D8D7D6D6D5D3D2D2D1D0CFCFCECDCDCCCBCACAC9C8C8C7
C6C6C4C3C3C2C2C1BFBFBEBDBDBBBBBAB9B9B8B8B7B7B6B5B5B4B4B3B3B1B1B0AEAEADADACACABAB
A9A9A8A8A8A7A7A5A5A4A4A3A3A1A1A1A0A09E9E9D9D9D9C9C9C9A9A999999989898969696959595
949494929292919191918F8F8F8E8E8E8E8C8C8C8C8B8B8B8B8B8989898989878787878785858585
8585848484848484848482828282828282828282828281818181818181818181818181818181
>
<
F8F9F9F9F9F9F9F9F9FAFAFCFCFCFCFCFCFCFDFCFCFCFDFDFDFDFDFDFDFEFEFEFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFDFFFEFEFEFEFDFDFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFBFC
FCFCFCFDFEFEFEFEFEFEFEFEFEFDFDFDFDFCFCFCFCFCFCFCFCFCFCFCFCFDFDFDFDFDFEFEFEFEFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFDFDFDFDFDFDFDFDFDFDFDFDFDFD
FDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFC
>
0
<
ECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEF
EFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2
F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4
F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5
F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6
F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6
>
<
1C1D1E1F202122232425262728292A2B2C2C2D2E2F30313233343536363738393A3B3C3D3D3E3F40
41424243444546464748494A4A4B4C4D4D4E4F50505152535354555656575858595A5B5B5C5D5D5E
5F5F606161626263646465666667676869696A6A6B6B6C6D6D6E6E6F6F7070717272737374747575
7676777777787879797A7A7B7B7C7C7C7D7D7E7E7F7F7F8080808181828282838383848484858585
868686878787888888888989898A8A8A8A8B8B8B8B8C8C8C8C8C8D8D8D8D8D8E8E8E8E8E8F8F8F8F
8F8F909090909090909091919191919191919191919192929292929292929292929292929292
>
<
24242424242424242424242323232323232323232323232323232323232323232222222222222222
22222222222222222222222222222222212121212121212121212121212121212121212121212121
21212121202020202020202020202020202020202020202020202020202020202020202020201F1F
1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F
1F1F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E
1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E
>
4 %_Br
[
0.752941 0.988235 0.015686 0.003922 0.396078 0.176471 0.564706 2 50 99.7006 %_BS
%_0.752941 0.988235 0.015686 0.003922 0.396078 0.176471 0.564706 2 50 99.7006 Bs
0.878431 0.52549 0 0 0 0.443137 0.733333 2 39.0625 80.5389 %_BS
%_0.878431 0.52549 0 0 0 0.443137 0.733333 2 39.0625 80.5389 Bs
0.698039 0.145098 0 0 0 0.678431 0.933333 2 45 62.5749 %_BS
%_0.698039 0.145098 0 0 0 0.678431 0.933333 2 45 62.5749 Bs
0.505882 0.003922 0.992157 0 0.545098 0.772549 0.247059 2 50 47.6048 %_BS
%_0.505882 0.003922 0.992157 0 0.545098 0.772549 0.247059 2 50 47.6048 Bs
0 0.254902 0.988235 0 1 0.756863 0.054902 2 56.1404 30.5389 %_BS
%_0 0.254902 0.988235 0 1 0.756863 0.054902 2 56.1404 30.5389 Bs
0.003922 0.505882 0.988235 0 0.964706 0.572549 0.117647 2 51.0204 16.4671 %_BS
%_0.003922 0.505882 0.988235 0 0.964706 0.572549 0.117647 2 51.0204 16.4671 Bs
0.007843 0.992157 0.972549 0 0.92549 0.109804 0.141176 2 29.0909 0 %_BS
%_0.007843 0.992157 0.972549 0 0.92549 0.109804 0.141176 2 29.0909 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Radial Gradient 1)
(Radial Gradient 1) 1 2 Bd
[
<
00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F20212223
24252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F51
52535455555658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B
7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F9090919293949495969697989899
9A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAAB
ABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2
>
<
00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C
1D1D1E1F202122222324262728292A2B2C2D2E2F2F30313233343536373838393A3B3C3D3E3F4041
434445464748494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F6061626364646566676869
6A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A
8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3
A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC
>
<
00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C
1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142
434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566
676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F808181828383
8485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A
9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B
0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B
3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587
898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9
D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1
B0AFAEADADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A
898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766656463
6261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C
3B3A393837363534333231302F2E2D2C2B2A29282726252423
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A89
8887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261
605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A39
3837363534333231302F2E2D2C2B2A29282726252423222120
>
4 %_Br
[
1 0 50 0 %_BS
%_1 0 50 0 Bs
0 0 50 100 %_BS
%_0 0 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Radial Gradient 2)
(Radial Gradient 2) 1 7 Bd
[
<
02020202020201010101010101010101010101000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000010101010101010000000000000000000000000000000000000001010000
00000000000000000001010101010101010101010101010101000000000000000000000000010101
01010101010101010101000000000000000000000001010100000000000000000000000000000000
0000010101010101010101010101010101010101010101010101010101010101010101010101
>
<
FDFDFCFCFBFBFAFAF9F8F8F7F7F6F5F5F4F4F4F3F2F1F0F0EFEEEDEDEDECEBEBEAE9E8E8E8E7E6E5
E4E3E3E3E2E1E0E0DFDEDDDCDCDBDAD9D9D8D7D6D6D5D3D2D2D1D0CFCFCECDCDCCCBCACAC9C8C8C7
C6C6C4C3C3C2C2C1BFBFBEBDBDBBBBBAB9B9B8B8B7B7B6B5B5B4B4B3B3B1B1B0AEAEADADACACABAB
A9A9A8A8A8A7A7A5A5A4A4A3A3A1A1A1A0A09E9E9D9D9D9C9C9C9A9A999999989898969696959595
949494929292919191918F8F8F8E8E8E8E8C8C8C8C8B8B8B8B8B8989898989878787878785858585
8585848484848484848482828282828282828282828281818181818181818181818181818181
>
<
F8F9F9F9F9F9F9F9F9FAFAFCFCFCFCFCFCFCFDFCFCFCFDFDFDFDFDFDFDFEFEFEFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFDFFFEFEFEFEFDFDFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFBFC
FCFCFCFDFEFEFEFEFEFEFEFEFEFDFDFDFDFCFCFCFCFCFCFCFCFCFCFCFCFDFDFDFDFDFEFEFEFEFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFDFDFDFDFDFDFDFDFDFDFDFDFDFD
FDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFC
>
0
<
ECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEF
EFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2
F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4
F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5
F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6
F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6
>
<
1C1D1E1F202122232425262728292A2B2C2C2D2E2F30313233343536363738393A3B3C3D3D3E3F40
41424243444546464748494A4A4B4C4D4D4E4F50505152535354555656575858595A5B5B5C5D5D5E
5F5F606161626263646465666667676869696A6A6B6B6C6D6D6E6E6F6F7070717272737374747575
7676777777787879797A7A7B7B7C7C7C7D7D7E7E7F7F7F8080808181828282838383848484858585
868686878787888888888989898A8A8A8A8B8B8B8B8C8C8C8C8C8D8D8D8D8D8E8E8E8E8E8F8F8F8F
8F8F909090909090909091919191919191919191919192929292929292929292929292929292
>
<
24242424242424242424242323232323232323232323232323232323232323232222222222222222
22222222222222222222222222222222212121212121212121212121212121212121212121212121
21212121202020202020202020202020202020202020202020202020202020202020202020201F1F
1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F
1F1F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E
1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E
>
4 %_Br
<
01010100000101010100000101010000000101010000000101000001010100000101010000000001
010000000101000000
>
<
817F7E7D7B7A79797776747371706F6D6C6B69686765646261605F5D5C5B59585755545352504F4E
4C4B4A484745444341
>
0.988235
0
<
F6F6F6F7F7F7F7F7F7F8F8F8F8F8F9F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFCFDFDFDFDFD
FDFEFEFEFEFEFFFFFF
>
<
9293949596979898999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8
B9BABBBCBDBEBFC0C1
>
<
1E1E1D1D1D1C1C1C1B1B1B1A1A1A1A19191918181817171716161515151414141313131212121111
111010100F0F0F0E0E
>
4 %_Br
<
0000010102020303040405060607070809090A0C0C0D0E0E10111212131515161719191A1B1C1C1E
1F202121232425262628292A2B2B2C2E2F303231333435373839393A3B3C3D3E3F40404243444546
47494A4A4B4C4D4E4F515253545556565758595A5B5C5D5E60616262636566676868696A6B6C6D6E
6F707172737475767778797A7B7C7D7D7E7F8081
>
<
41414040404040403F3F3F3E3E3E3E3D3D3D3C3C3C3B3B3B3A383838383737373736363635343434
333332323231313030302F2F2E2E2E2D2C2C2B2B2A2A282727262626252524242323232222212120
201F1F1F1E1E1D1D1C1B1B1A1A191717171616151414131312121111100F0F0E0E0E0D0D0C0C0B0A
0A0A090908060605050504040403030302020201
>
<
FCFCFDFDFDFDFDFDFDFDFEFEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFDFD
>
0
<
FFFFFEFEFDFDFCFCFBFBFAF9F9F8F8F7F6F6F5F4F4F3F2F2F1F0EFEFEEEDEDECEBEAEAE9E8E7E7E6
E5E4E3E3E2E1E0DFDFDEDDDCDBDBDAD9D8D7D6D6D5D4D3D2D1D0D0CFCECDCCCBCAC9C9C8C7C6C5C4
C3C2C1C1C0BFBEBDBCBBBAB9B8B7B6B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A5A4A3A2A1A09F
9E9D9C9B9A999897969594939291908F8E8D8C8B
>
<
C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2
C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3
C3C3C3C3C3C3C3C3C3C3C3C3C3C3C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4
C4C4C4C4C4C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5
>
<
0E0E0E0E0F0F0F0F1010101011111111121212121313131414141515151516161617171718181819
19191A1A1A1B1B1B1C1C1C1D1D1D1E1E1E1F1F202020212121222222232324242425252526262627
2728282829292A2A2A2B2B2B2C2C2D2D2D2E2E2F2F2F303031313132323333333434353535363637
3737383839393A3A3A3B3B3C3C3C3D3D3E3E3F3F
>
4 %_Br
<
8182838384858687878788898A8A8B8C8D8D8D8E8F90909091929393939495959596979798989999
9A9B9B9B9C9D9D9D9E9E9F9F9FA0A1A2A2A2A2A3A3A3A5A5A6A6A6A7A7A8A9A9A9AAAAABABACACAD
ADADADADAFAFAFAFB0B0B0B0B1B1B2B2B2B2B3B4B3B4B4B4B4B4B5B5B5B5B5B5B6B6B6B6B6B6B7B7
B7B7B7B7B7B7B7B7B8B8B8B8B8B8B8B9B9B9B8B8B8B8B8B8B8B8B8B8B8B8B8B8B8B8B8B7B7B7B7B7
B7B7B7B6B6B6B5B5B5B4B4B4B3B3B2B2
>
<
01010000010100000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000002020202010101030303
030303030404040404040404050606060606060707070707070709090909090909090A0A0A0A0B0B
0B0D0D0E0E0E0E0E10101010101010121212121212131315151515151515171717171818181A1A1B
1B1B1B1C1C1E1F1F2020202123242425
>
<
FDFCFBFAF9F8F7F6F5F4F3F3F2F1F0EEECEBE9E7E6E4E2E0DEDDDDDBDAD9D8D7D5D4D3D2D1CFCECD
CBCAC8C7C6C5C4C3C2C0BFBEBCBBBAB8B7B6B4B3B1B0AFADACABA9A7A6A5A3A2A09F9D9C9A989795
9492918F8E8C8A8887858482807F7D7B7A7877747371706E6D6B6967656362605F5D5B5A58575553
524F4E4C4A48474542403F3D3C3A38363433312F2E2C2A27262422201F1D1B1917151312100E0C0A
09070504030000000000000000000000
>
0
<
8B8A898988878685858483828181807F7E7D7D7C7B7A7A7978777676757473727271706F6E6E6D6C
6B6A6A6968676666656463626261605F5F5E5D5C5B5B5A5958575756555453535251504F4F4E4D4C
4B4B4A494847474645444443424140403F3E3D3C3C3B3A393838373635343433323130302F2E2D2C
2C2B2A292928272625252423222121201F1E1D1D1C1B1A191918171615151413121111100F0E0E0D
0C0B0A0A090807060605040302020100
>
<
C5C5C5C5C4C4C4C4C4C4C4C3C3C3C3C3C3C3C3C2C2C2C2C2C2C2C1C1C1C1C1C1C1C0C0C0C0C0C0C0
C0BFBFBFBFBFBFBFBEBEBEBEBEBEBEBDBDBDBDBDBDBDBCBCBCBCBCBCBCBCBBBBBBBBBBBBBBBABABA
BABABABAB9B9B9B9B9B9B9B9B8B8B8B8B8B8B8B7B7B7B7B7B7B7B6B6B6B6B6B6B6B6B5B5B5B5B5B5
B5B4B4B4B4B4B4B4B3B3B3B3B3B3B3B2B2B2B2B2B2B2B2B1B1B1B1B1B1B1B0B0B0B0B0B0B0AFAFAF
AFAFAFAFAFAEAEAEAEAEAEAEADADADAD
>
<
3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263646566
6768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E
8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6
B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDE
DFE0E1E2E3E4E5E6E7E8E9EAEBECEDEE
>
4 %_Br
<
B2B3B3B4B5B5B6B7B8B9BABBBBBCBDBEBEBFBFC0C1C1C2C2C3C3C4C5C6C6C7C8C9C9CACBCBCCCDCE
CECFD0D1D1D1D2D3D4D4D5D5D6D7D7D8D9D9DADBDBDCDDDDDEDEDFDFE0E0
>
<
252628292B2C2E2F303233353638393B3D3E3F414344464847484A4C4E4F505254555759595A5C5D
5F6162646666676A6B6D6F6F707274767678797B7B7D7F7F818282848686
>
0
0
0
<
ADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796969594939291908F8E8D8C8B8B8A8988
8786858483838281807F7E7E7D7C7B7A7A79787777767575747373727171
>
<
EEEDECEBEBEAE9E8E7E6E6E5E4E3E2E1E1E0DFDEDDDCDCDBDAD9D8D8D7D6D5D5D4D3D2D1D1D0CFCE
CECDCCCBCBCAC9C9C8C7C6C6C5C4C4C3C2C2C1C0C0BFBFBEBDBDBCBCBBBB
>
4 %_Br
<
E0E0E0E1E1E1E2E2E2E3E3E4E4E4E4E4E5E5E5E5E6E6E6E6E7E7E7E7E7E7E7E7E7E7E7E7E8E8E7E8
E7E7E8E8E8E7E7E7E7E7E7E7E6E7E6E6E7E6E6E5E5E5E5E4E4E4E3E3E2E1E2E1E0E0E0DFDFDEDEDE
DDDDDCDCDBDBDAD9DAD9D8D8D7D6D6D5D4D5D4D4D3D2D2D1D1D0CFCFCECECDCDCCCCCBCACAC8C8C8
C7C7C6C6C5C5C4C4C4C3C3C2C2C2C2C1C1C1C0C0C0C0
>
<
8688888A8C8C8E90909294949698989A9C9C9E9EA0A2A2A4A6A6A8A8AAACACAEB0B0B2B2B4B5B5B7
B7B9BBBBBDBDBFBFC1C2C3C4C4C6C6C7C9C9CBCBCDCDCFCFD1D1D2D2D4D4D6D6D7D7D9D9DADBDCDC
DEDEDFE0E1E1E3E4E5E5E7E7E8E8E9EAEAECECEDEDEEEEEFF0F1F1F2F2F2F3F3F5F5F4F6F6F5F7F7
F7F8F8F8F8F9F9F9FAFAFAFAFBFBFBFAFBFCFCFCFCFC
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000002020202020103030303030303040404040404
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000001010101010101010101010101
>
<
000102030405060708090A0B0C0D0E0F10111213131415161718191A1B1C1D1E1F1F202122232425
26272728292A2B2C2D2D2E2F3031323233343536373738393A3A3B3C3D3E3E3F4041414243444445
4646474849494A4B4B4C4D4D4E4F4F50515152525354545555565757585859595A5A5B5C5C5D5D5D
5E5E5F5F606061616162626363636364646465656565
>
<
7170706F6E6E6D6C6C6B6A6A696868676666656564636362616160605F5E5E5D5C5C5B5B5A595958
5857565655555454535252515150504F4E4E4D4D4C4C4B4B4A4A4949484847474646454544444343
4242414140403F3F3E3E3D3D3C3C3C3B3B3A3A393939383837373736363635353434343333333232
32313131313030302F2F2F2F2E2E2E2E2E2D2D2D2D2D
>
<
BBBBBABAB9B9B8B8B8B7B7B6B6B6B5B5B4B4B4B3B3B2B2B2B1B1B0B0B0AFAFAEAEAEADADACACACAB
ABABAAAAA9A9A9A8A8A8A7A7A7A6A6A6A5A5A4A4A4A3A3A3A2A2A2A1A1A1A0A0A09F9F9F9F9E9E9E
9D9D9D9C9C9C9C9B9B9B9A9A9A9A9999999898989897979797969696969595959594949494949393
93939392929292929291919191919191909090909090
>
4 %_Br
[
0.007843 0.992157 0.972549 0 0.92549 0.109804 0.141176 2 29.0909 0 %_BS
%_0.007843 0.992157 0.972549 0 0.92549 0.109804 0.141176 2 29.0909 0 Bs
0.003922 0.505882 0.988235 0 0.964706 0.572549 0.117647 2 51.0204 16.4671 %_BS
%_0.003922 0.505882 0.988235 0 0.964706 0.572549 0.117647 2 51.0204 16.4671 Bs
0 0.254902 0.988235 0 1 0.756863 0.054902 2 56.1404 30.5389 %_BS
%_0 0.254902 0.988235 0 1 0.756863 0.054902 2 56.1404 30.5389 Bs
0.505882 0.003922 0.992157 0 0.545098 0.772549 0.247059 2 50 47.6048 %_BS
%_0.505882 0.003922 0.992157 0 0.545098 0.772549 0.247059 2 50 47.6048 Bs
0.698039 0.145098 0 0 0 0.678431 0.933333 2 45 62.5749 %_BS
%_0.698039 0.145098 0 0 0 0.678431 0.933333 2 45 62.5749 Bs
0.878431 0.52549 0 0 0 0.443137 0.733333 2 39.0625 80.5389 %_BS
%_0.878431 0.52549 0 0 0 0.443137 0.733333 2 39.0625 80.5389 Bs
0.752941 0.988235 0.015686 0.003922 0.396078 0.176471 0.564706 2 50 99.7006 %_BS
%_0.752941 0.988235 0.015686 0.003922 0.396078 0.176471 0.564706 2 50 99.7006 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Offset Squares Pattern)
(Offset Squares Pattern) 0 0 55.0781 55.0801 [
%AI3_Tile
(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 55.0801 L
55.0781 55.0801 L
55.0781 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.05098 0.019608 0.631373 0 0.964706 0.921569 0.494118 Xa
 0.05098 0.019608 0.631373 0 0.964706 0.921569 0.494118 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
26.1436 52.3262 m
26.1436 29.4307 L
3.0313 29.4307 L
3.0313 52.3262 L
26.1436 52.3262 L
f
25.0264 50.123 m
5.8906 50.123 L
5.8906 32.4961 L
25.0264 32.4961 L
25.0264 50.123 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.0471 0.0118 0.6314 0 k
 0.0471 0.0118 0.6314 0 K
) @
(
%AI6_BeginPatternLayer
*u
5.8906 50.123 m
25.0264 50.123 L
25.0264 32.4961 L
5.8906 32.4961 L
5.8906 50.123 L
n
10.0313 34.2578 m
24.1338 34.2578 L
24.1338 48.3613 L
10.0313 48.3613 L
10.0313 34.2578 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.031373 0.635294 0.788235 0 0.929412 0.482353 0.282353 Xa
 0.031373 0.635294 0.788235 0 0.929412 0.482353 0.282353 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
22.4082 48.793 m
8.3057 48.793 L
8.3057 34.6895 L
22.4082 34.6895 L
22.4082 48.793 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.113725 0.929412 0.835294 0.019608 0.827451 0.215686 0.223529 Xa
 0.113725 0.929412 0.835294 0.019608 0.827451 0.215686 0.223529 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
52.6943 24.7852 m
52.6943 1.6758 L
28.9355 1.6758 L
28.9355 24.7852 L
52.6943 24.7852 L
f
47.6777 22.582 m
30.0527 22.582 L
30.0527 4.957 L
47.6777 4.957 L
47.6777 22.582 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
30.0527 22.582 m
50.6982 22.582 L
50.6982 4.957 L
30.0527 4.957 L
30.0527 22.582 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.435294 0.003922 0.835294 0 0.607843 0.796078 0.360784 Xa
 0.435294 0.003922 0.835294 0 0.607843 0.796078 0.360784 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
47.4199 21.252 m
32.2393 21.252 L
32.2393 6.5029 L
47.4199 6.5029 L
47.4199 21.252 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.501961 0.933333 0.003922 0 0.568627 0.211765 0.576471 Xa
 0.501961 0.933333 0.003922 0 0.568627 0.211765 0.576471 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
27.5391 27.5391 m
27.5391 0 L
0 0 L
0 27.5391 L
27.5391 27.5391 L
f
25.4316 26.1445 m
2.7529 26.1445 L
2.7529 2.1699 L
25.4316 2.1699 L
25.4316 26.1445 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4941 0.9412 0 0 k
 0.4941 0.9412 0 0 K
) @
(
%AI6_BeginPatternLayer
*u
4.9561 7.4004 m
22.582 7.4004 L
22.582 25.0273 L
4.9561 25.0273 L
4.9561 7.4004 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.05098 0.019608 0.631373 0 0.964706 0.921569 0.494118 Xa
 0.05098 0.019608 0.631373 0 0.964706 0.921569 0.494118 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
22.582 5.6738 m
4.9561 5.6738 L
4.9561 25.0273 L
22.582 25.0273 L
22.582 5.6738 L
f
20.3887 21.3281 m
7.5811 21.3281 L
7.5811 10.0313 L
20.3887 10.0313 L
20.3887 21.3281 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.776471 0.062745 0.478431 0 0 0.678431 0.611765 Xa
 0.776471 0.062745 0.478431 0 0 0.678431 0.611765 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
6.9355 8.7363 m
21.0371 8.7363 L
21.0371 22.8379 L
6.9355 22.8379 L
6.9355 8.7363 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.678431 0.07451 0 0 0 0.717647 0.941176 Xa
 0.678431 0.07451 0 0 0 0.717647 0.941176 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
55.0781 55.0801 m
55.0781 27.5391 L
27.5391 27.5391 L
27.5391 55.0801 L
55.0781 55.0801 L
f
52.3252 50.9688 m
30.292 50.9688 L
30.292 28.9355 L
52.3252 28.9355 L
52.3252 50.9688 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8235 0 0.0039 0 k
 0.8235 0 0.0039 0 K
) @
(
%AI6_BeginPatternLayer
*u
30.292 50.9688 m
52.3252 50.9688 L
52.3252 28.9355 L
30.292 28.9355 L
30.292 50.9688 L
n
32.4951 30.0527 m
50.1221 30.0527 L
50.1221 47.6777 L
32.4951 47.6777 L
32.4951 30.0527 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.031373 0.215686 0.447059 0 0.956863 0.792157 0.584314 Xa
 0.031373 0.215686 0.447059 0 0.956863 0.792157 0.584314 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
50.1221 30.0527 m
32.4951 30.0527 L
32.4951 48.9727 L
50.1221 48.9727 L
50.1221 30.0527 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.003922 0.886274 0.011765 0 0.929412 0.25098 0.588235 Xa
 0.003922 0.886274 0.011765 0 0.929412 0.25098 0.588235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.9063 33.749 m
49.0078 33.749 L
49.0078 47.8506 L
34.9063 47.8506 L
34.9063 33.749 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(Unnamed Brush Pat 4)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-7890.8833 8490.9551 m
-7799.0479 8490.9551 L
-7799.0479 8486.6758 L
-7890.8833 8486.6758 L
-7890.8833 8490.9551 L
n
0 O
0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
-7890.6631 8488.2754 m
-7891 8488.3418 -7890.4814 8488.5313 -7890.8833 8488.3887 C
-7890.8379 8488.2705 -7890.7725 8488.1816 -7890.6631 8488.2754 C
f
-7800.1675 8488.4414 m
-7801.2524 8489.2041 -7802.6816 8488.4336 -7803.8701 8488.9199 C
-7804.0098 8488.9521 -7803.8345 8488.502 -7804.1484 8488.6025 C
-7805.3008 8489.1953 -7807.1162 8488.8418 -7808.5195 8488.3848 C
-7808.4346 8488.2666 L
-7808.7017 8488.1816 -7809.0283 8488.5723 -7809.3115 8488.5176 C
-7809.3135 8488.4395 -7809.2207 8488.4063 -7809.2861 8488.2979 C
-7809.3574 8488.5352 -7809.7983 8488.4082 -7809.9185 8488.584 C
-7810.0303 8488.4922 -7810.0195 8488.3047 -7810.1641 8488.2002 C
-7810.3262 8488.4697 L
-7810.7769 8489.1094 -7811.4209 8488.4258 -7812.0361 8488.7559 C
-7812.0063 8488.6934 -7811.9453 8488.6445 -7811.9941 8488.584 C
-7812.9814 8488.9727 -7814.2168 8488.8994 -7815.3208 8489.043 C
-7815.2769 8488.9482 -7815.2363 8488.7754 -7815.3008 8488.668 C
-7815.3555 8488.9512 -7815.6963 8489.0225 -7815.9922 8489.0781 C
-7816.1255 8488.7871 -7816.4995 8489.3438 -7816.8467 8489.1826 C
-7816.8169 8489.1191 L
-7817.0732 8489.4238 -7817.1973 8488.9434 -7817.4053 8489.3086 C
-7817.5684 8489.0801 L
-7817.6807 8489.4902 -7817.9395 8488.8672 -7818.1514 8489.0762 C
-7818.1445 8489.1602 L
-7818.3442 8489.2598 -7818.4482 8489.0537 -7818.6338 8489.123 C
-7818.6514 8489.0762 L
-7819.0854 8489.1826 -7819.3379 8488.9551 -7819.3271 8489.2754 C
-7819.4795 8489.0186 -7818.9063 8489.1582 -7819.1455 8488.7842 C
-7820.5732 8489.1152 -7822.0459 8489.0498 -7823.4834 8489.0566 C
-7823.6465 8488.9277 -7823.7505 8488.8887 -7823.7871 8488.7666 C
-7823.9307 8488.832 -7824.3281 8488.8262 -7824.4585 8488.9902 C
-7824.4102 8488.9834 -7824.5513 8488.8262 -7824.6274 8488.8105 C
-7824.8887 8488.6895 -7824.9131 8489.1621 -7825.2002 8489.0186 C
-7825.0859 8488.9336 -7825.0469 8488.8301 -7825.0854 8488.7109 C
-7825.3301 8488.9609 -7825.6577 8488.9209 -7825.9473 8489.002 C
-7825.9023 8488.9482 -7825.8325 8488.916 -7825.8433 8488.8154 C
-7826.1602 8489.0986 -7826.4209 8488.7559 -7826.6982 8488.9346 C
-7826.5947 8488.75 L
-7827.0415 8488.5254 -7826.7266 8489.1367 -7827.1128 8489.0039 C
-7827.02 8488.9453 -7827.0527 8488.873 -7827.0361 8488.7979 C
-7827.3965 8489.1338 -7827.9795 8489.0225 -7828.3389 8489.1367 C
-7828.3174 8489.1113 -7828.3232 8489.0605 Y
-7828.7148 8489.1025 -7829.1245 8488.998 -7829.5552 8489.1445 C
-7829.7119 8489.0625 -7829.5039 8488.6934 -7829.9185 8488.7617 C
-7829.9033 8489.1328 -7830.6221 8488.9141 -7830.3779 8489.334 C
-7830.7319 8489.2734 -7831.2925 8489.1338 -7831.5283 8489.2598 C
-7831.3691 8489.1191 -7831.7007 8488.8066 -7831.4063 8488.7754 C
-7831.6289 8488.5498 L
-7831.5957 8488.3984 -7831.3999 8488.6016 -7831.4707 8488.4102 C
-7831.6182 8488.4258 -7832.0479 8488.5723 -7832.1797 8488.5117 C
-7832.4531 8488.7393 -7832.7041 8489.1641 -7833.1465 8489.2109 C
-7832.9385 8489.0664 -7833.2646 8488.8018 -7833.1235 8488.7383 C
-7833.7407 8489.4482 L
-7833.8877 8489.4658 -7833.7725 8489.1563 -7833.9854 8489.2529 C
-7833.9746 8489.3506 -7834.0674 8489.4121 -7834.1318 8489.4922 C
-7834.1875 8489.4482 -7834.7441 8489.584 -7834.8081 8489.2178 C
-7834.8735 8489.0762 -7834.5684 8489.1426 -7834.7314 8489.0117 C
-7835.0029 8489.0146 -7835.0151 8489.1406 -7835.2871 8489.1465 C
-7835.2925 8489.0977 L
-7835.4717 8489.043 -7835.8213 8489.2529 -7835.6265 8489.4551 C
-7835.5015 8489.4658 -7835.6738 8489.2354 -7835.4888 8489.3418 C
-7835.6152 8489.5537 -7835.9312 8489.6133 -7836.2031 8489.6162 C
-7836.1104 8489.5586 -7836.1216 8489.4609 -7836.0845 8489.3574 C
-7836.4497 8489.6445 -7836.8369 8489.7354 -7837.2451 8489.8555 C
-7837.2515 8490.0293 -7837.0928 8489.5391 -7837.0327 8489.6309 C
-7837.5557 8489.3896 -7838.1128 8489.9727 -7838.5479 8489.6201 C
-7838.4766 8489.5898 -7838.5098 8489.8672 -7838.5146 8489.8184 C
-7838.7666 8489.7969 -7838.7549 8489.5449 -7838.9189 8489.6377 C
-7838.9355 8489.4902 -7839.1255 8489.6855 -7839.2944 8489.7305 C
-7839.3818 8489.8369 -7839.3384 8489.6582 -7839.1914 8489.6426 C
-7839.4268 8489.7666 -7840.3691 8489.9941 -7840.9131 8489.7793 C
-7840.9023 8489.877 -7841.2471 8490.1377 -7841.3721 8490.127 C
-7841.3232 8489.8984 L
-7841.4375 8489.7617 -7841.7422 8489.918 -7841.7632 8489.7227 C
-7842.0303 8490 -7840.7344 8489.4863 -7841.0957 8489.7002 C
-7841.1895 8489.5098 -7841.5991 8490.0645 -7841.5215 8489.7529 C
-7841.7725 8489.7617 -7842.0161 8490.0186 -7842.2559 8489.8047 C
-7842.1865 8489.8418 -7842.0522 8489.4873 -7842.2549 8489.5039 C
-7842.6123 8489.5449 -7842.3564 8489.6133 -7842.6465 8489.6895 C
-7842.8281 8489.7832 L
-7842.8398 8490.0059 -7843.1475 8489.7529 -7843.0146 8490.002 C
-7843.0586 8489.8184 -7843.5337 8490.1152 -7843.4971 8489.7461 C
-7843.4473 8489.4551 L
-7843.6016 8489.4766 -7843.7002 8489.7617 -7843.8213 8489.8896 C
-7843.8418 8489.8633 -7843.8823 8489.8047 -7843.8745 8489.7578 C
-7843.8994 8490.2031 -7844.2432 8489.7207 -7844.4268 8490.0645 C
-7844.7505 8489.9102 -7845.2495 8490.0498 -7845.4023 8489.7734 C
-7845.6514 8489.9082 -7845.8784 8490.0674 -7846.1621 8489.9727 C
-7846.1055 8489.9307 -7846.0283 8489.918 -7846.0122 8489.8223 C
-7846.1904 8489.6914 -7846.2344 8489.8086 -7846.3975 8489.8809 C
-7846.3608 8489.8145 -7846.7539 8489.6201 -7846.9521 8489.4629 C
-7847.1992 8489.5957 -7847.1143 8489.8359 -7847.1392 8489.9824 C
-7847.3652 8489.543 -7847.8379 8490.2656 -7848.1211 8489.8672 C
-7848.0352 8489.8066 -7847.7598 8489.6514 -7847.9658 8489.541 C
-7848.1919 8489.1025 -7848.4219 8489.8643 -7848.7861 8489.6543 C
-7848.6968 8490.0186 L
-7848.8594 8489.793 -7849.2334 8490.2305 -7849.1963 8489.8594 C
-7849.3184 8489.9902 -7849.6265 8489.7383 -7849.5859 8490.0938 C
-7850.1846 8489.793 -7851.0425 8490.2754 -7851.4102 8489.6377 C
-7851.4961 8489.6973 -7851.7104 8489.6367 -7851.6665 8489.8193 C
-7851.5239 8490.0176 -7851.4673 8489.6777 -7851.4141 8489.8125 C
-7851.4912 8489.8232 -7851.5078 8489.9209 -7851.5161 8489.9697 C
-7851.7021 8489.8887 -7851.8486 8489.8633 -7851.6729 8489.5674 C
-7852.0869 8489.3477 -7852.1001 8490.1719 -7852.6274 8490.0322 C
-7852.6035 8489.8857 -7852.6436 8489.8301 -7852.7979 8489.8535 C
-7853.0903 8490.1055 L
-7853.4312 8490.0469 -7853.2842 8489.7705 -7853.2925 8489.5215 C
-7853.4746 8489.5645 -7853.6973 8489.5527 -7853.7803 8489.7383 C
-7854.0015 8489.4258 L
-7853.8398 8489.6514 -7854.1514 8489.5762 -7854.2368 8489.6367 C
-7854.1514 8489.5762 L
-7854.1846 8489.4697 -7854.3955 8489.5352 -7854.5024 8489.5664 C
-7854.4766 8489.7207 -7854.2617 8489.7832 -7854.1445 8489.8281 C
-7854.2373 8489.9375 -7854.3823 8489.9121 -7854.5059 8490.041 C
-7854.4648 8489.7969 -7854.8027 8489.8672 -7854.9473 8489.8418 C
-7855.1133 8489.7891 -7855.1348 8490.0605 -7855.1831 8490.0527 C
-7855.1875 8489.9258 -7855.4541 8490.0313 -7855.3247 8489.8535 C
-7855.2681 8489.8125 -7855.1953 8489.9766 -7855.1016 8489.8643 C
-7855.2109 8489.7705 -7855.1982 8489.5498 -7855.4258 8489.7109 C
-7855.5967 8489.832 -7855.3818 8490.1934 -7855.7061 8490.0391 C
-7855.6211 8489.9785 -7855.6055 8489.8809 -7855.5391 8489.793 C
-7855.8433 8489.666 L
-7855.8564 8489.8887 L
-7855.8975 8489.832 -7855.8691 8489.8125 -7855.8877 8489.7832 C
-7855.9785 8490.0176 -7856.3521 8489.8555 -7856.4209 8490.1191 C
-7856.5742 8490.1426 -7856.7441 8489.9648 -7856.8906 8489.9395 C
-7856.8623 8489.9199 L
-7857.0415 8489.7891 -7857.2793 8489.875 -7857.4297 8490.0254 C
-7857.4219 8489.9766 L
-7857.5195 8489.959 -7857.7505 8489.9941 -7857.8735 8490.125 C
-7858.1201 8489.957 -7857.9561 8489.2842 -7858.2295 8489.5645 C
-7858.48 8489.5723 -7858.6221 8489.9727 -7858.5215 8490.1152 C
-7858.9717 8489.9648 -7859.4834 8490.3281 -7859.9009 8489.9824 C
-7859.9658 8490.0723 -7859.9248 8490.1289 -7860.0586 8490.1816 C
-7860.7197 8490.0938 -7861.4551 8490.4453 -7861.9814 8490.0078 C
-7861.79 8489.9141 -7861.9688 8489.7842 -7861.9727 8489.6582 C
-7862.1309 8489.8574 -7862.1631 8489.4512 -7862.2197 8489.793 C
-7862.2041 8489.9941 -7862.2197 8490.0918 -7862.0337 8490.1729 C
-7862.4282 8490.2813 -7863.0283 8490.2813 -7863.2471 8490.0938 C
-7863.1377 8490.1865 -7863.2227 8490.248 -7863.3086 8490.3086 C
-7863.2803 8489.9873 -7863.5713 8489.9395 -7863.7915 8490.0527 C
-7863.8223 8490.248 L
-7863.9658 8490.0469 L
-7864.0503 8490.1094 -7864.0591 8490.457 -7864.2773 8490.2695 C
-7864.2891 8490.1934 -7864.3018 8490.1162 -7864.3418 8490.0605 C
-7864.5693 8490.2207 -7864.8906 8490.4922 -7865.1377 8490.3262 C
-7865.3398 8490.041 L
-7865.4453 8490.0723 -7865.6235 8490.2441 -7865.4375 8490.3262 C
-7865.8594 8490.1543 -7866.1309 8490.1328 -7866.2646 8489.8857 C
-7866.9912 8490.4873 -7868.0459 8490.5117 -7868.8906 8490.4688 C
-7868.8652 8490.3223 L
-7869.0923 8490.1855 -7868.9834 8490.5781 -7869.1416 8490.4766 C
-7869.0684 8490.3369 -7869.3145 8490.1729 -7869.1362 8490.002 C
-7869.4609 8489.8477 -7869.5547 8490.2559 -7869.7656 8490.3223 C
-7869.7979 8490.5146 -7869.5957 8490.1992 -7869.6367 8490.4434 C
-7869.6729 8490.5117 -7870.0859 8490.293 -7870.1362 8490.584 C
-7870.2178 8490.4697 -7870.1543 8490.2559 -7870.1104 8490.1377 C
-7870.3086 8490.2793 L
-7870.5513 8489.9395 -7869.7559 8489.6719 -7870.0107 8489.2529 C
-7870.1934 8489.2979 L
-7870.3682 8488.9941 -7869.71 8488.9551 -7870.1689 8488.8506 C
-7870.3682 8488.9941 -7870.5381 8489.416 -7870.3608 8489.5449 C
-7870.7754 8489.625 -7870.5527 8490.2383 -7870.9985 8490.2139 C
-7871.1201 8490.043 -7870.6416 8490.1729 -7870.7275 8489.9336 C
-7870.9375 8489.6992 -7871.1484 8490.0645 -7871.3354 8489.9824 C
-7871.1279 8490.0918 -7871.3032 8490.3857 -7871.4375 8490.4395 C
-7871.6641 8490.3018 -7871.29 8490.1641 -7871.6113 8490.1338 C
-7871.6641 8490.3018 -7871.9595 8490.4277 -7871.7041 8490.5449 C
-7871.8203 8490.9258 -7872.0381 8490.4395 -7872.2129 8490.7344 C
-7872.3174 8490.4658 -7871.8823 8490.1152 -7872.2354 8489.9814 C
-7872.1792 8490.2393 -7872.6704 8490.332 -7872.4839 8490.7139 C
-7872.6221 8490.6406 -7872.6367 8490.4375 -7872.5361 8490.2793 C
-7872.7334 8490.1201 -7873.0151 8490.75 -7873.0801 8490.2383 C
-7873.1479 8490.502 L
-7873.21 8490.416 -7873.2983 8490.3506 -7873.3994 8490.209 C
-7873.5732 8490.2041 -7873.96 8490.5664 -7873.9443 8490.168 C
-7874 8490.209 -7874.3975 8490.1914 -7874.2441 8490.4658 C
-7873.9971 8490.6338 -7873.96 8490.2656 -7873.8223 8490.6377 C
-7873.9971 8490.334 -7874.1787 8490.6777 -7874.3213 8490.7793 C
-7874.3447 8490.625 L
-7874.4297 8490.6855 -7874.6255 8490.6514 -7874.6787 8490.8184 C
-7874.6133 8490.7305 -7874.6475 8490.625 -7874.7148 8490.5879 C
-7874.8042 8490.8223 L
-7875.1494 8490.9395 -7874.8857 8490.4102 -7875.2217 8490.4785 C
-7874.9663 8490.2969 L
-7875.0225 8490.3359 -7875.1367 8490.1162 -7875.2979 8490.1895 C
-7875.3604 8490.4033 -7875.4775 8490.6602 -7875.5313 8490.8262 C
-7875.7207 8490.9199 -7875.6162 8490.585 -7875.8027 8490.8047 C
-7875.5586 8490.5469 L
-7875.5215 8490.4766 -7875.7231 8490.1934 -7875.9761 8490.1992 C
-7876.1377 8490.2734 -7876.3887 8490.582 -7876.1338 8490.6992 C
-7876.2607 8490.7031 -7876.4385 8490.5723 -7876.3379 8490.416 C
-7876.6255 8490.4902 -7876.2998 8490.6465 -7876.5479 8490.7793 C
-7876.6494 8490.6367 -7876.9658 8490.4336 -7877.1563 8490.2266 C
-7876.8975 8489.8682 L
-7877.0693 8489.8643 L
-7876.8467 8489.5781 -7877.1826 8489.6465 -7877.0566 8489.3438 C
-7877.1743 8489.2969 -7877.3169 8489.3994 -7877.4307 8489.4785 C
-7877.0864 8489.9629 -7877.8159 8490.1406 -7877.7158 8490.582 C
-7878.1875 8490.7031 -7878.0107 8489.5078 -7878.5024 8490.1992 C
-7878.4219 8490.3145 -7878.6533 8490.6504 -7878.3564 8490.5225 C
-7878.6494 8490.4746 -7878.5557 8490.9658 -7878.9014 8490.7832 C
-7878.6455 8490.6016 -7879.1763 8490.3359 -7878.8066 8490.0723 C
-7878.8311 8490.2178 -7878.6001 8490.1826 -7878.5435 8490.1426 C
-7878.6641 8489.9727 -7878.5186 8489.6973 -7878.8184 8489.6973 C
-7879.0015 8489.7393 -7879.2524 8489.748 -7879.2158 8489.9785 C
-7879.2085 8490.2314 -7878.9365 8489.9512 -7879.0537 8490.207 C
-7879.4185 8490.2949 -7879.4795 8489.9102 -7879.6304 8490.3594 C
-7879.3999 8490.3232 -7879.3423 8490.584 -7879.3467 8490.7578 C
-7879.6143 8490.8633 L
-7879.5625 8490.6953 L
-7879.9922 8490.5742 -7879.6895 8491 -7880.1055 8490.9551 C
-7880.3008 8490.623 L
-7880.2017 8490.3369 -7879.6953 8490.75 -7879.7695 8490.2842 C
-7880.04 8490.2656 -7880.1299 8490.502 -7880.3848 8490.3818 C
-7880.3281 8490.3418 -7880.2505 8490.3301 -7880.1943 8490.2891 C
-7880.2915 8490.2734 -7880.3877 8489.6563 -7880.7734 8490.0176 C
-7880.9727 8490.1582 -7880.8262 8490.1826 -7880.8311 8490.3574 C
-7881.2656 8490.4102 -7881.3955 8490.5879 -7881.6753 8490.6152 C
-7881.6177 8490.2754 -7882.1699 8490.582 -7881.8608 8490.2344 C
-7881.7188 8490.4336 -7881.0903 8490.4141 -7880.9365 8490.0898 C
-7881.0947 8489.6865 -7880.5952 8490.1465 -7880.5024 8489.7383 C
-7880.8506 8489.7285 -7880.8335 8489.332 -7880.8896 8489.0723 C
-7880.9863 8489.0537 -7881.0801 8489.1641 -7881.1377 8489.2041 C
-7881.1787 8489.4482 -7881.0522 8489.4453 -7881.0449 8489.6973 C
-7881.4336 8489.6309 -7881.8081 8489.7666 -7882.0225 8490.0059 C
-7882.1523 8489.8848 -7882.1113 8489.6406 -7881.9575 8489.6162 C
-7882.4199 8489.6895 -7882.9141 8489.6563 -7883.3535 8489.582 C
-7883.0693 8489.9814 -7883.8433 8489.6758 -7883.6494 8490.0078 C
-7883.4141 8490.0977 -7883.2119 8490.3818 -7883.3418 8490.5605 C
-7883.4888 8490.5352 -7883.3369 8490.3857 -7883.3984 8490.3008 C
-7883.5859 8490.5186 -7883.6895 8489.9512 -7883.8735 8490.2949 C
-7883.4512 8490.166 -7883.7915 8489.8086 -7883.7139 8489.4961 C
-7884.0186 8489.6719 -7883.7007 8489.2734 -7884.0024 8489.2734 C
-7884.3057 8489.4473 -7884.6787 8489.584 -7885.0161 8489.6514 C
-7885.4399 8489.3555 -7886.0898 8489.6465 -7886.4683 8489.6582 C
-7886.6665 8489.5 -7886.5322 8489.1465 -7886.7471 8489.085 C
-7886.9995 8489.0918 -7886.5601 8489.4658 -7886.9336 8489.3047 C
-7886.8975 8489.2344 L
-7887.0107 8489.3154 -7887.5825 8488.9941 -7887.6929 8489.502 C
-7887.5776 8489.1191 L
-7887.6475 8489.084 -7887.7119 8489.1719 -7887.7695 8489.2129 C
-7887.7725 8489.0879 -7887.8535 8488.9746 -7887.7402 8488.8926 C
-7887.9707 8488.6289 -7888.2241 8488.9346 -7888.4746 8488.9453 C
-7888.3135 8489.1719 L
-7888.7422 8489.3496 -7889.0293 8489.125 -7889.4443 8489.2041 C
-7889.4316 8488.9824 L
-7889.6787 8489.1152 L
-7889.6182 8488.8994 -7889.8447 8488.7617 -7889.9751 8488.9414 C
-7889.3335 8488.3984 L
-7889.1553 8488.5293 -7889.5283 8488.666 -7889.4165 8488.8848 C
-7889.3213 8489.0762 -7888.9375 8489.0146 -7888.8755 8488.8018 C
-7889.0225 8488.7773 -7889.0293 8488.8262 -7889.1436 8488.9063 C
-7889.1919 8488.5977 -7888.9688 8488.6094 -7888.8584 8488.4033 C
-7888.9355 8488.416 -7889.0449 8488.3223 -7889.0615 8488.4199 C
-7888.9102 8488.2695 -7888.7578 8488.2461 -7888.5059 8488.2383 C
-7888.6763 8488.3594 -7888.4131 8488.4297 -7888.4775 8488.5176 C
-7888.4575 8488.2461 -7888.2168 8488.1621 -7887.9053 8488.2383 C
-7887.6831 8488.5527 -7887.3208 8488.0361 -7886.96 8488.123 C
-7887.1064 8488.3984 -7887.2935 8488.6191 -7887.5127 8488.7305 C
-7887.2861 8488.8682 -7887.2607 8488.7227 -7887.0337 8488.8613 C
-7886.9238 8488.6563 -7886.8457 8488.3418 -7886.5503 8488.2168 C
-7886.5342 8488.4199 L
-7886.2666 8488.3154 -7886.2666 8488.0146 -7885.9258 8488.0723 C
-7885.3418 8488.1719 -7884.7407 8488.1719 -7884.2949 8488.1973 C
-7884.2783 8488.3994 L
-7884.0303 8487.9658 -7883.4521 8488.2393 -7883.1182 8488.0469 C
-7882.5503 8488.2422 -7881.8848 8487.8535 -7881.5938 8488.2031 C
-7880.5913 8488.0469 -7879.7148 8487.8945 -7878.6768 8487.9688 C
-7878.8516 8488.2637 L
-7878.6655 8488.0469 -7878.7305 8488.4336 -7878.5479 8488.3896 C
-7878.7578 8488.1543 -7878.2949 8488.084 -7878.1665 8487.9033 C
-7877.7041 8488.1328 -7877.1104 8487.8818 -7876.7007 8487.6758 C
-7876.6846 8487.8789 L
-7876.2705 8487.498 -7875.7759 8487.832 -7875.2598 8487.8945 C
-7875.2007 8487.9785 -7875.1074 8488.1689 -7874.9536 8488.1465 C
-7874.6738 8487.8184 -7874.5273 8487.8418 -7874.1167 8487.6367 C
-7873.8169 8487.6367 -7873.3301 8487.7178 -7873.0254 8487.8457 C
-7871.8975 8487.3848 -7870.7456 8487.6797 -7869.5732 8487.4023 C
-7869.4888 8487.6406 L
-7868.3521 8487.1309 -7866.9541 8487.5938 -7865.9839 8487.332 C
-7866.0776 8487.7393 L
-7865.7734 8487.8643 -7865.3843 8487.6328 -7865.4619 8487.3438 C
-7865.1567 8487.4688 -7864.7007 8487.1465 -7864.5068 8487.4814 C
-7864.1953 8487.5566 -7864.1255 8487.293 -7863.8662 8487.2383 C
-7863.2422 8487.3926 -7863.0107 8487.3574 -7862.4224 8487.2813 C
-7862.5684 8487.2559 L
-7862.6328 8487.3457 -7862.6387 8487.5186 -7862.4922 8487.5449 C
-7862.2725 8487.4307 -7861.6846 8487.6543 -7861.9033 8487.168 C
-7861.2754 8487.4482 -7860.4385 8486.9395 -7859.8271 8487.3184 C
-7859.8789 8487.1855 -7859.7246 8487.1602 -7859.6602 8487.0703 C
-7859.1089 8487.0645 -7858.5293 8487.3359 -7858.0898 8487.1094 C
-7858.0024 8487.1758 -7858.2295 8487.3359 -7858.0049 8487.3496 C
-7857.8721 8487.2979 -7858.0024 8487.1758 -7857.8384 8487.1016 C
-7856.9453 8486.8535 -7856.0303 8487.3574 -7855.2188 8487.293 C
-7853.7754 8487.0361 -7852.2695 8487.166 -7850.8867 8487.123 C
-7850.9023 8487.2207 L
-7850.4395 8486.8477 -7849.8159 8487.6025 -7849.4463 8487.041 C
-7849.3369 8487.1338 -7849.0283 8487.085 -7849.1094 8487.2734 C
-7848.7407 8487.0098 -7848.0771 8487.5215 -7847.5439 8487.1865 C
-7847.5928 8487.1777 -7847.6211 8487.1973 -7847.6777 8487.2393 C
-7847.1392 8487.4551 -7846.6641 8487.1602 -7846.0957 8487.3555 C
-7846.1533 8487.3975 -7846.2583 8487.4277 -7846.2754 8487.5254 C
-7846.0557 8487.7129 -7845.7549 8487.1133 -7845.6348 8487.584 C
-7845.5088 8487.5801 -7845.5449 8487.3477 -7845.6221 8487.3613 C
-7844.3779 8487.5449 -7843.0498 8487.2441 -7841.7549 8487.1367 C
-7840.8271 8487.418 -7841.6982 8487.9297 -7840.9663 8487.5781 C
-7840.9063 8487.6689 -7840.9229 8487.3984 -7840.9131 8487.4961 C
-7840.6299 8487.3643 -7840.4717 8488.0215 -7840.2754 8487.7754 C
-7840.3564 8487.4863 -7840.1445 8487.6133 -7840.1387 8487.4375 C
-7839.5713 8487.625 -7839.4575 8487.8857 -7839.0098 8487.666 C
-7839.0435 8487.8184 L
-7838.5186 8487.3887 -7837.9102 8487.6191 -7837.4673 8487.123 C
-7834.5728 8487.0322 -7831.7983 8486.7578 -7828.9761 8486.7002 C
-7826.1865 8486.7949 -7823.4551 8486.5723 -7820.6221 8486.8359 C
-7819.9585 8487.2354 -7819.9087 8487.2246 -7819.1797 8487.0625 C
-7819.2095 8487.127 -7819.2549 8487.1426 -7819.2061 8487.2031 C
-7819.1699 8486.875 -7818.6929 8487.1719 -7818.6235 8486.8594 C
-7817.5762 8486.9199 -7816.6113 8486.8301 -7815.5337 8486.8281 C
-7815.7041 8486.8633 -7815.7896 8487.1309 -7815.5869 8487.1094 C
-7815.3755 8486.8994 L
-7815.3408 8486.9922 L
-7815.2021 8486.9434 -7815.0513 8486.7813 -7815.1943 8486.6758 C
-7812.4873 8486.3926 -7809.8242 8487.0498 -7807.1729 8486.9697 C
-7806.5435 8487.1064 -7805.6475 8486.9814 -7804.9629 8486.9141 C
-7802.9355 8487.3506 -7801.1079 8487.7041 -7799.0479 8487.3984 C
-7799.3169 8488.2461 -7800.1675 8488.4414 V
f
-7890.2578 8488.2422 m
-7890.1855 8488.4063 -7889.9497 8488.4961 -7890.1377 8488.7139 C
-7890.1611 8488.5605 -7890.2822 8488.3887 -7890.2578 8488.2422 C
f
-7883.9619 8489.9297 m
-7883.9536 8489.8809 -7883.8721 8489.9961 -7883.8521 8490.0225 C
-7883.9297 8490.0352 -7884.0024 8490.1729 -7884.0645 8490.0879 C
-7883.9854 8490.0762 -7883.9976 8489.998 -7883.9619 8489.9297 C
f
-7882.3521 8490.0273 m
-7882.3765 8490.1729 -7882.7207 8490.2891 -7882.9238 8490.3066 C
-7882.3521 8490.0273 L
f
-7880.8521 8490.6289 m
-7880.7227 8490.752 -7880.7583 8490.8193 -7880.9326 8490.8154 C
-7880.9453 8490.7383 -7880.8877 8490.6992 -7880.8521 8490.6289 C
f
-7880.7456 8490.2969 m
-7880.6211 8490.293 -7880.5591 8490.3789 -7880.4985 8490.4629 C
-7880.5029 8490.3369 -7880.7871 8490.541 -7880.7456 8490.2969 C
f
-7877.4893 8490.7207 m
-7877.4111 8490.709 -7877.2417 8490.5879 -7877.1689 8490.75 C
-7877.2505 8490.6367 -7877.5498 8490.9346 -7877.4893 8490.7207 C
f
-7875.9761 8490.5 m
-7875.9272 8490.5098 -7875.9072 8490.5361 -7875.8506 8490.4961 C
-7875.7607 8490.5625 -7875.8555 8490.6689 -7875.9312 8490.6826 C
-7875.9761 8490.5 L
f
-7848.4287 8489.9141 m
-7848.5923 8489.9863 L
-7848.5684 8489.8418 L
-7848.4287 8489.9141 L
f
-7836.3574 8489.9063 m
-7836.1943 8489.8145 -7836.2441 8490.043 -7836.2168 8490.0645 C
-7836.3643 8490.0801 -7836.1621 8489.8848 -7836.3574 8489.9063 C
f
-7829.8486 8489.1777 m
-7829.8984 8489.1816 L
-7829.8818 8488.8818 L
-7829.8486 8489.1777 L
f
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pattern 3)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-7891 8491 m
-7476.3335 8491 L
-7476.3335 8487.667 L
-7891 8487.667 L
-7891 8491 L
n
1 Ap
0 O
0.74902 0.678431 0.670588 0.901961 0 0 0 Xa
-7476.3335 8491 m
-7767.6655 8489.667 -7801.6665 8489.667 v
-7827.6655 8489.667 -7891 8491 Y
-7891 8487.667 L
-7476.3335 8487.667 L
-7476.3335 8491 L
f
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pattern 5)0 A
u
0 Ap
0 J 0 j 1 w 4 M []0 d0 XR
-7891 8491 m
-7752.6675 8491 L
-7752.6675 8489 L
-7891 8489 L
-7891 8491 L
n
0 O
0.74902 0.678431 0.670588 0.901961 0 0 0 Xa
-7891 8489.625 m
-7891 8490.375 L
-7752.6675 8491 L
-7752.6675 8489 L
-7891 8489.625 L
f
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -
(ush Tool/ Charcoal/ Adobe ArtOnPath Brush Tool/ Inner Thinner/) -
( Adobe ArtOnPath Brush Tool/ Graduated Thin To Thick/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Flat)
(1 5 5 0 0 90 90 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Charcoal)
(1 / Unnamed Brush Pat 4/ / / / / 0 1 /  1 1 1.2 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Graduated Thin To Thick)
(1 / Unnamed Brush Pattern 5/ / / / / 0 1 /  1 3 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Inner Thinner)
(1 / Unnamed Brush Pattern 3/ / / / / 0 1 /  1 3 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs
([Registration])
Pc
0 0 0 0 1 1 1 Xa
(White)
Pc
0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
(Black)
Pc
0.007843 0.992157 0.972549 0 0.92549 0.109804 0.141176 Xa
(CMYK Red)
Pc
0.039216 0 0.937255 0 1 0.945098 0 Xa
(CMYK Yellow)
Pc
0.831372 0.070588 0.956863 0.003922 0 0.647059 0.317647 Xa
(CMYK Green)
Pc
0.698039 0.145098 0 0 0 0.678431 0.933333 Xa
(CMYK Cyan)
Pc
0.992157 0.964706 0.039216 0.003922 0.180392 0.192157 0.568627 Xa
(CMYK Blue)
Pc
0.011765 0.992157 0.011765 0 0.921569 0 0.545098 Xa
(CMYK Magenta)
Pc
0.176471 1 0.909804 0.078431 0.745098 0.117647 0.176471 Xa
(C=15 M=100 Y=90 K=10)
Pc
0 0.901961 0.85098 0 0.933333 0.25098 0.211765 Xa
(C=0 M=90 Y=85 K=0)
Pc
0 0.8 0.94902 0 0.941176 0.352941 0.156863 Xa
(C=0 M=80 Y=95 K=0)
Pc
0.003922 0.505882 0.988235 0 0.964706 0.572549 0.117647 Xa
(C=0 M=50 Y=100 K=0)
Pc
0.003922 0.352941 0.847059 0 0.980392 0.686275 0.25098 Xa
(C=0 M=35 Y=85 K=0)
Pc
0.054902 0.003922 0.905882 0 0.976471 0.92549 0.192157 Xa
(C=5 M=0 Y=90 K=0)
Pc
0.2 0.003922 0.988235 0 0.839216 0.870588 0.137255 Xa
(C=20 M=0 Y=100 K=0)
Pc
0.505882 0.003922 0.992157 0 0.545098 0.772549 0.247059 Xa
(C=50 M=0 Y=100 K=0)
Pc
0.752941 0.007843 1 0 0.215686 0.701961 0.290196 Xa
(C=75 M=0 Y=100 K=0)
Pc
0.862745 0.172549 1 0.035294 0 0.576471 0.270588 Xa
(C=85 M=10 Y=100 K=10)
Pc
0.901961 0.333333 0.976471 0.258824 0 0.407843 0.219608 Xa
(C=90 M=30 Y=95 K=30)
Pc
0.756863 0.003922 0.74902 0 0.160784 0.705882 0.45098 Xa
(C=75 M=0 Y=75 K=0)
Pc
0.792157 0.109804 0.454902 0 0 0.65098 0.611765 Xa
(C=80 M=10 Y=45 K=0)
Pc
0.705882 0.160784 0 0 0.14902 0.662745 0.878431 Xa
(C=70 M=15 Y=0 K=0)
Pc
0.85098 0.498039 0.003922 0 0.105882 0.458824 0.733333 Xa
(C=85 M=50 Y=0 K=0)
Pc
0.996078 0.933333 0.066667 0.003922 0.168627 0.219608 0.560784 Xa
(C=100 M=95 Y=5 K=0)
Pc
1 1 0.305882 0.219608 0.14902 0.133333 0.380392 Xa
(C=100 M=100 Y=25 K=25)
Pc
0.752941 0.988235 0.015686 0.003922 0.396078 0.176471 0.564706 Xa
(C=75 M=100 Y=0 K=0)
Pc
0.513725 0.996078 0.019608 0 0.564706 0.152941 0.556863 Xa
(C=50 M=100 Y=0 K=0)
Pc
0.360784 1 0.352941 0.090196 0.619608 0.121569 0.388235 Xa
(C=35 M=100 Y=35 K=10)
Pc
0.098039 0.996078 0.482353 0.003922 0.85098 0.109804 0.360784 Xa
(C=10 M=100 Y=50 K=0)
Pc
0.007843 0.94902 0.2 0 0.92549 0.160784 0.482353 Xa
(C=0 M=95 Y=20 K=0)
Pc
0.254902 0.25098 0.403922 0 0.756863 0.705882 0.603922 Xa
(C=25 M=25 Y=40 K=0)
Pc
0.396078 0.447059 0.486274 0.062745 0.603922 0.517647 0.47451 Xa
(C=40 M=45 Y=50 K=5)
Pc
0.517647 0.513725 0.611765 0.231373 0.443137 0.396078 0.345098 Xa
(C=50 M=50 Y=60 K=25)
Pc
0.545098 0.603922 0.647059 0.396078 0.352941 0.290196 0.258824 Xa
(C=55 M=60 Y=65 K=40)
Pc
0.235294 0.396078 0.643137 0.015686 0.764706 0.6 0.419608 Xa
(C=25 M=40 Y=65 K=0)
Pc
0.305882 0.494118 0.756863 0.098039 0.658824 0.486275 0.309804 Xa
(C=30 M=50 Y=75 K=10)
Pc
0.360784 0.603922 0.807843 0.243137 0.541176 0.364706 0.231373 Xa
(C=35 M=60 Y=80 K=25)
Pc
0.392157 0.643137 0.894118 0.356863 0.458824 0.298039 0.156863 Xa
(C=40 M=65 Y=90 K=35)
Pc
0.415686 0.698039 0.968627 0.490196 0.376471 0.219608 0.07451 Xa
(C=40 M=70 Y=100 K=50)
Pc
0.517647 0.701961 0.792157 0.698039 0.231373 0.137255 0.078431 Xa
(C=50 M=70 Y=80 K=70)
Pc
Bb
2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Linear Gradient 1)
Pc
Bb
0 0 0 0 Bh
2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Radial Gradient 1)
Pc
Bb
2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Linear Gradient 2)
Pc
Bb
0 0 0 0 Bh
2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Radial Gradient 2)
Pc
(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Offset Squares Pattern)
Pc
0 g
(K=100)
Pc
0.100006 g
(K=90)
Pc
0.200012 g
(K=80)
Pc
0.300003 g
(K=70)
Pc
0.400009 g
(K=60)
Pc
0.5 g
(K=50)
Pc
0.600006 g
(K=40)
Pc
0.700012 g
(K=30)
Pc
0.800003 g
(K=20)
Pc
0.900009 g
(K=10)
Pc
0.950012 g
(K=5)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u
0 O
0 0 0 0 1 1 1 Xa
0 J 0 j 1 w 4 M []0 d0 XR
131.8726 244.7031 m
149.0244 244.4121 L
149.0244 250.8037 L
134.2549 250.5137 L
131.8726 244.7031 L
f
u
*u
1 D
0.764706 0.513725 0.015686 0 0.27451 0.462745 0.721569 Xa
122.8115 344.063 m
123.8115 308.063 L
128.5024 301.6138 133.9302 298.3555 140.1631 298.5771 C
137.7759 255.6172 L
129.208 255.3408 L
125.1348 239.0479 L
154.4609 238.2334 L
154.4609 256.1553 L
145.5796 255.8691 L
145.5796 299.5986 L
152.4043 301.6216 157.9761 303.8203 159.6807 306.5576 C
164.8115 345.063 L
122.8115 344.063 L
f
0 D
149.0244 244.4121 m
131.8726 244.7031 L
134.2549 250.5137 L
149.0244 250.8037 L
149.0244 244.4121 L
f
*U
U
U
u
0.862745 0.854902 0.443137 0.478431 0.164706 0.145098 0.262745 Xa
1 XR
30.5137 573.3247 m
70.0796 573.3247 l
47.9229 528.3428 l
30.5137 573.3247 l
f
0.764706 0.513725 0.015686 0 0.27451 0.462745 0.721569 Xa
75.7827 573.3247 m
115.3491 573.3247 l
93.1924 528.3428 l
75.7827 573.3247 l
f
0.054902 0 0.015686 0 0.929412 0.968627 0.976471 Xa
121.0522 573.3247 m
160.6182 573.3247 l
138.4614 528.3428 l
121.0522 573.3247 l
f
0.047059 0.952941 0.87451 0.003922 0.890196 0.188235 0.203922 Xa
166.3213 573.3247 m
205.8862 573.3247 l
183.7295 528.3428 l
166.3213 573.3247 l
f
0.211765 0.980392 1 0.129412 0.694118 0.137255 0.121569 Xa
212.5425 573.3247 m
252.1084 573.3247 l
229.9517 528.3428 l
212.5425 573.3247 l
f
0.862745 0.854902 0.443137 0.478431 0.164706 0.145098 0.262745 Xa
257.8115 573.3247 m
297.3774 573.3247 l
275.2207 528.3428 l
257.8115 573.3247 l
f
0.764706 0.513725 0.015686 0 0.27451 0.462745 0.721569 Xa
303.0801 573.3247 m
342.6465 573.3247 l
320.4883 528.3428 l
303.0801 573.3247 l
f
0.054902 0 0.015686 0 0.929412 0.968627 0.976471 Xa
348.3496 573.3247 m
387.9141 573.3247 l
365.7578 528.3428 l
348.3496 573.3247 l
f
0.047059 0.952941 0.87451 0.003922 0.890196 0.188235 0.203922 Xa
392.9629 573.3247 m
432.5273 573.3247 l
410.3711 528.3428 l
392.9629 573.3247 l
f
0.211765 0.980392 1 0.129412 0.694118 0.137255 0.121569 Xa
438.2305 573.3247 m
477.7969 573.3247 l
455.6406 528.3428 l
438.2305 573.3247 l
f
0.862745 0.854902 0.443137 0.478431 0.164706 0.145098 0.262745 Xa
483.5 573.3247 m
523.0664 573.3247 l
500.9082 528.3428 l
483.5 573.3247 l
f
0.764706 0.513725 0.015686 0 0.27451 0.462745 0.721569 Xa
528.7695 573.3247 m
568.334 573.3247 l
546.1777 528.3428 l
528.7695 573.3247 l
f
0.900009 g
0 XR
30.0659 581.2432 m
30.0659 578.1973 L
112.5234 579.416 146.3716 579.416 v
190.6392 579.416 569.9336 578.1973 Y
569.9336 581.2432 L
30.0659 581.2432 L
f
U
u
0.054902 0 0.015686 0 0.929412 0.968627 0.976471 Xa
123.2529 166.916 m
76.8647 129.0664 107.79 64.1836 v
66.1597 77.1602 60.2129 37.1484 v
-17.1016 126.9033 123.2529 166.916 v
f
0.211765 0.980392 1 0.129412 0.694118 0.137255 0.121569 Xa
45.189 62.3223 m
51.4585 47.3115 60.2129 37.1484 Y
66.1597 77.1602 107.79 64.1836 Y
101.8989 76.541 98.8203 87.915 97.6851 98.2363 C
76.8555 93.085 58.8071 79.376 45.189 62.3223 C
f
0.764706 0.513725 0.015686 0 0.27451 0.462745 0.721569 Xa
123.2529 166.916 m
78.8921 154.2695 56.2847 136.6543 46.0996 118.4727 C
51.7783 120.9404 57.6313 123.1074 63.7031 124.8945 C
66.0815 125.6865 68.4619 126.4805 70.8403 127.2734 c
80.6753 130.3789 90.1714 129.4297 99.771 127.9551 C
106.374 153.1338 123.2529 166.916 Y
f
0.862745 0.854902 0.443137 0.478431 0.164706 0.145098 0.262745 Xa
131.3154 189.6621 m
180.3447 111.7646 180.3447 66.3467 v
107.79 64.1836 l
131.3154 189.6621 l
f
0.047059 0.952941 0.87451 0.003922 0.890196 0.188235 0.203922 Xa
154.79 147.1553 m
144.0078 146.082 133.27 144.7959 122.5947 143.1475 C
115.0352 102.8291 L
134.0425 104.9082 153.1436 105.4521 172.1797 106.2559 C
167.3779 120.2471 161.0396 134.4902 154.79 147.1553 C
f
134.354 204.7637 m
130.7856 191.7881 l
171.2271 198.2754 l
134.354 204.7637 l
f
0.862745 0.854902 0.443137 0.478431 0.164706 0.145098 0.262745 Xa
32.855 41.4736 m
37.6421 32.8955 44.4814 24.9756 56.644 18.7646 C
138.7153 18.7646 l
151.7988 33.9043 l
32.855 41.4736 L
f
0.900009 g
130.3892 211.252 m
96.0845 37.4492 l
104.2119 36.9326 l
135.1465 211.252 l
130.3892 211.252 l
f
0.321569 0.27451 0.188235 0 0.686275 0.678431 0.72549 Xa
39.3179 32.1123 m
42.6919 28.5361 l
143.3003 24.0713 l
144.5938 25.5674 l
39.3179 32.1123 l
f
0 0 0 0 1 1 1 Xa
138.5815 138.1074 m
142.9355 129.2861 L
152.6714 127.8701 L
145.627 121.0049 L
147.2896 111.3086 L
138.5815 115.8867 L
129.874 111.3086 L
131.5361 121.0049 L
124.4917 127.8701 L
134.2275 129.2861 L
138.5815 138.1074 L
f
1 Ap
0.900009 g
140.0654 214.7822 m
140.0654 210.5576 136.6396 207.1318 132.415 207.1318 c
128.1895 207.1318 124.7642 210.5576 124.7642 214.7822 c
124.7642 219.0068 128.1895 222.4326 132.415 222.4326 c
136.6396 222.4326 140.0654 219.0068 140.0654 214.7822 c
f
U
*u
0 Ap
1 D
0.047059 0.952941 0.87451 0.003922 0.890196 0.188235 0.203922 Xa
105.2217 264.8281 m
106.2959 274.2744 106.0986 283.9902 103.3662 293.5127 c
101.5391 299.7788 98.4683 305.9258 93.7114 310.9351 c
89.0195 315.9141 82.2407 319.5112 75.0513 319.8799 c
60.0479 320.7476 48.5605 309.1865 43.2012 297.8291 c
38.2725 287.5977 34.5269 265.7588 Y
39.1851 193.0938 L
92.2866 194.0254 L
103.6392 255.6523 L
103.7969 255.6211 L
104.2676 258.0684 104.6738 260.5449 105.0005 263.043 C
105.3291 264.8271 L
105.2217 264.8281 L
f
0 D
43.1387 265.6455 m
42.9741 267.6172 42.8389 270.0332 42.8638 272.6426 c
42.8081 279.1953 44.0112 286.9063 45.6641 291.1045 C
46.877 293.6113 49.9473 302.1592 58.5664 308.875 c
62.8252 312.0703 68.6152 314.5088 74.6514 313.875 c
80.6777 313.4141 86.3506 309.8926 90.1392 305.001 c
97.8599 294.9805 98.6812 281.6211 98.0088 272.5332 c
97.7954 269.6533 97.479 267.0967 97.1475 264.9346 C
43.1387 265.6455 L
f
*U
0.007843 0.364706 0.184314 0 0.960784 0.694118 0.701961 Xa
69.437 239.2002 m
73.9702 230.0186 L
84.1035 228.5459 L
76.7715 221.3994 L
78.5005 211.3076 L
69.437 216.0713 L
60.373 211.3076 L
62.1045 221.3994 L
54.7725 228.5459 L
64.9063 230.0186 L
69.437 239.2002 L
f
u
0.211765 0.980392 1 0.129412 0.694118 0.137255 0.121569 Xa
111.3413 454.9673 m
99.1777 457.249 106.7803 476.2544 118.1836 473.2139 C
107.457 483.9395 124.9785 487.2656 133.4248 482.562 C
135.4165 495.6655 151.812 486.0747 154.6675 476.3027 C
154.1392 474.3516 153.7861 472.3462 153.604 470.3125 C
151.9917 469.9321 149.6841 469.3784 148.5933 468.6523 C
143.2715 466.3711 139.4697 464.8511 136.4297 459.5288 c
131.1074 450.4058 135.6689 440.5229 137.1895 430.6401 C
138.71 423.0381 143.2715 405.5518 135.6689 399.4707 c
124.8462 390.8135 116.7656 410.2251 127.667 412.8774 C
119.644 412.4297 119.4707 422.5942 126.5464 426.8389 C
118.9438 423.7979 110.5811 429.1191 115.1426 436.7227 C
102.2188 430.6401 96.8975 452.6875 111.3413 454.9673 C
f
u
0.047059 0.952941 0.87451 0.003922 0.890196 0.188235 0.203922 Xa
119.2554 456.3472 m
119.2554 456.3398 120.8433 440.7646 134.8354 436.2764 c
135.625 395.771 135.6279 395.6079 v
135.7764 387.9966 141.7412 381.9233 148.7598 379.9922 c
152.2021 379.0444 156.3008 378.7085 159.6611 380.1489 c
162.6084 381.4141 167.6631 386.4795 167.6396 389.9678 c
167.5908 397.625 154.7212 398.249 155.9604 393.2383 C
155.6035 394.6821 165.3232 396.2813 164.5259 389.9761 c
163.7568 383.875 153.7163 383.0459 149.2725 384.8496 c
143.6143 387.147 142.9634 393.7539 144.3447 399.042 c
144.9629 401.4131 149.6929 403.0137 151.4575 404.354 c
156.5361 408.209 160.3213 412.7109 160.1196 419.3486 c
160.0244 422.4746 159.5659 426.0806 158.3252 428.9727 c
157.708 430.4102 156.9263 431.6411 155.8218 432.7544 c
155.1714 433.4111 152.207 434.7773 152.002 435.4849 c
151.999 435.4927 148.3086 448.1587 165.7339 444.9917 c
178.938 442.3501 179.9946 434.9565 v
190.0288 438.3892 187.1235 456.083 v
164.6782 442.3501 159.3955 458.7222 v
158.9448 460.1211 160.6284 464.2007 160.5352 465.9663 c
160.2397 471.5522 156.9766 475.8833 151.7437 477.8774 c
136.1797 483.8066 117.4092 474.4795 119.2554 456.3472 c
f
0.007843 0.364706 0.184314 0 0.960784 0.694118 0.701961 Xa
158.3252 428.9727 m
157.8589 430.0596 157.2969 431.0259 156.5811 431.9082 C
160.5991 426.9551 157.5298 417.3032 152.1924 413.5288 c
147.2139 410.0083 145.4346 403.1387 144.3447 399.042 C
145.9658 400.0693 150.4512 403.5884 151.4575 404.354 c
156.5361 408.209 160.3213 412.7109 160.1196 419.3486 c
160.0244 422.4746 159.5659 426.0806 158.3252 428.9727 c
f
U
u
1 Ap
0 0 0 0 1 1 1 Xa
136.7749 463.6348 m
136.7749 458.9268 140.5908 455.1094 145.2983 455.1094 c
150.0073 455.1094 153.8242 458.9268 153.8242 463.6348 c
153.8242 468.3428 150.0073 472.1582 145.2983 472.1582 c
140.5908 472.1582 136.7749 468.3428 136.7749 463.6348 c
f
0 Ap
0.211765 0.980392 1 0.129412 0.694118 0.137255 0.121569 Xa
145.3091 467.46 m
148.1382 467.6445 150.5835 465.4995 150.7676 462.6699 c
150.8135 461.9907 150.2998 461.4053 149.6196 461.3618 c
148.9385 461.3145 148.3516 461.832 148.3076 462.5073 c
148.2085 463.979 146.9409 465.0938 145.4697 465 c
143.998 464.9004 142.8872 463.6333 142.9785 462.1621 c
143.0244 461.4844 142.5093 460.895 141.8286 460.8501 c
141.1509 460.8066 140.564 461.3203 140.5176 462.0024 c
140.3369 464.8325 142.4795 467.2734 145.3091 467.46 c
f
U
U
u
0.862745 0.854902 0.443137 0.478431 0.164706 0.145098 0.262745 Xa
33.6152 419.2002 m
21.4517 421.4819 29.0547 440.4868 40.4575 437.4468 C
29.7319 448.1724 47.2529 451.499 55.6992 446.7949 C
57.6909 459.8979 74.0864 450.3076 76.9419 440.5356 C
76.4141 438.5845 76.0605 436.5781 75.8784 434.5444 C
74.2661 434.165 71.959 433.6113 70.8677 432.8843 C
65.5454 430.6045 61.7441 429.084 58.7036 423.7617 c
53.3818 414.6382 57.9438 404.7559 59.4639 394.873 C
60.9839 387.271 65.5454 369.7847 57.9438 363.7036 c
47.1211 355.0459 39.0391 374.458 49.9414 377.1099 C
41.917 376.6621 41.7451 386.8262 48.8208 391.0713 C
41.2183 388.0308 32.854 393.3521 37.417 400.9551 C
24.4917 394.873 19.1719 416.9194 33.6152 419.2002 C
f
u
0.764706 0.513725 0.015686 0 0.27451 0.462745 0.721569 Xa
41.5298 420.5801 m
41.5298 420.5728 43.1167 404.9976 57.1099 400.5093 c
57.8994 360.0039 57.9023 359.8403 v
58.0513 352.2295 64.0161 346.1563 71.0337 344.2256 c
74.4766 343.2773 78.5757 342.9414 81.9351 344.3813 c
84.8828 345.647 89.9375 350.7119 89.9141 354.2007 c
89.8652 361.8579 76.9956 362.4819 78.2354 357.4712 C
77.8779 358.915 87.5972 360.5132 86.7998 354.2085 c
86.0313 348.1079 75.9907 347.2783 71.5469 349.0825 c
65.8882 351.3789 65.2378 357.9868 66.6187 363.2739 c
67.2368 365.646 71.9668 367.2466 73.7319 368.5864 c
78.8105 372.4419 82.5952 376.9438 82.394 383.5815 c
82.2988 386.707 81.8403 390.3135 80.5996 393.2056 c
79.9824 394.6436 79.2007 395.874 78.0967 396.9873 c
77.4458 397.6436 74.4814 399.0103 74.2764 399.7178 c
74.2734 399.7256 70.583 412.3911 88.0078 409.2246 c
101.2119 406.583 102.269 399.1895 v
112.3032 402.6221 109.3979 420.3154 v
86.9526 406.583 81.6699 422.9546 v
81.2188 424.354 82.9028 428.4336 82.8096 430.1992 c
82.5146 435.7852 79.251 440.1162 74.0181 442.1099 c
58.4546 448.0396 39.6831 438.7124 41.5298 420.5801 c
f
0.254902 0.133333 0.023529 0 0.729412 0.8 0.894118 Xa
80.5996 393.2056 m
80.1333 394.2925 79.5718 395.2588 78.8555 396.1411 C
82.873 391.188 79.8047 381.5361 74.4673 377.7617 c
69.4883 374.2412 67.7085 367.3716 66.6187 363.2739 C
68.2402 364.3022 72.7251 367.8213 73.7319 368.5864 c
78.8105 372.4419 82.5952 376.9438 82.394 383.5815 c
82.2988 386.707 81.8403 390.3135 80.5996 393.2056 c
f
U
u
1 Ap
0 0 0 0 1 1 1 Xa
59.0488 427.8677 m
59.0488 423.1592 62.8652 419.3423 67.5728 419.3423 c
72.2813 419.3423 76.0986 423.1592 76.0986 427.8677 c
76.0986 432.5752 72.2813 436.3911 67.5728 436.3911 c
62.8652 436.3911 59.0488 432.5752 59.0488 427.8677 c
f
0 Ap
0.862745 0.854902 0.443137 0.478431 0.164706 0.145098 0.262745 Xa
67.5835 431.6929 m
70.4126 431.877 72.8579 429.7324 73.0425 426.9019 c
73.0874 426.2236 72.5742 425.6387 71.8936 425.5942 c
71.2129 425.5474 70.626 426.0654 70.582 426.7402 c
70.4829 428.2109 69.2153 429.3267 67.7441 429.2324 c
66.2725 429.1328 65.1611 427.8662 65.2529 426.3945 c
65.2983 425.7163 64.7837 425.1279 64.103 425.083 c
63.4248 425.0396 62.8379 425.5532 62.792 426.2354 c
62.6113 429.0654 64.7534 431.5063 67.5835 431.6929 c
f
U
U
u
u
*u
1 D
0.054902 0 0.015686 0 0.929412 0.968627 0.976471 Xa
520.0967 519.9995 m
486.9141 519.9995 460.0137 493.0991 460.0137 459.915 c
460.0137 426.7324 486.9141 399.832 520.0967 399.832 c
553.2793 399.832 580.1807 426.7324 580.1807 459.915 c
580.1807 493.0991 553.2793 519.9995 520.0967 519.9995 c
f
0 D
517.7861 437.4868 m
504.1611 437.4868 493.1152 448.5317 493.1152 462.1577 c
493.1152 475.7822 504.1611 486.8267 517.7861 486.8267 c
531.4102 486.8267 542.4561 475.7822 542.4561 462.1577 c
542.4561 448.5317 531.4102 437.4868 517.7861 437.4868 c
f
*U
U
*u
1 D
0.047059 0.952941 0.87451 0.003922 0.890196 0.188235 0.203922 Xa
472.0547 495.9956 m
479.3486 488.127 488.0557 481.8599 498.7061 477.7944 C
503.0371 483.0732 509.5176 486.5186 516.8096 486.8022 C
510.8896 495.8867 507.3984 506.1982 508.6162 518.8906 C
493.7432 516.0112 480.8252 507.6567 472.0547 495.9956 C
f
494.2402 454.7725 m
485.8154 446.6494 474.583 444.5952 461.5537 446.4272 C
464.7998 432.2783 473.0273 420.0332 484.3105 411.6528 C
490.5879 420.8452 497.3975 430.8149 504.5752 441.3267 C
499.7109 444.4175 495.999 449.1626 494.2402 454.7725 C
f
522.4189 437.9277 m
528.3135 426.8467 532.1191 414.8306 531.8496 400.9888 C
545.8203 403.7588 558.042 411.3721 566.7012 422.0044 C
557.2383 432.9111 545.8281 438.3584 534.4873 444.0054 C
531.1738 440.9541 527.0234 438.8037 522.4189 437.9277 C
f
542.3701 460.1919 m
554.9199 468.3359 567.2344 470.8994 579.3857 469.6426 C
576.9941 484.3271 569.291 497.2275 558.2969 506.2935 C
548.1572 498.0938 542.334 487.6274 537.9023 476.4292 C
540.7666 472.3999 542.4561 467.4775 542.4561 462.1577 c
542.4561 461.4951 542.4219 460.8408 542.3701 460.1919 C
f
*U
U
u
u
0 D
0.054902 0 0.015686 0 0.929412 0.968627 0.976471 Xa
323.6279 75.4961 m
323.6279 36.3682 l
388.6553 14.3301 428.334 36.3682 v
449.2715 61.4434 403.2598 61.4434 v
323.6279 75.4961 l
f
u
0.192157 0.101961 0.12549 0 0.796078 0.831373 0.835294 Xa
334.6475 32.7959 m
334.6475 69.4336 L
337.9551 69.4336 L
337.9551 32.7959 L
334.6475 32.7959 L
334.6475 32.7959 L
f
U
u
347.874 28.1045 m
347.874 67.2324 L
351.1768 67.2324 L
351.1768 28.1045 L
347.874 28.1045 L
347.874 28.1045 L
f
U
u
359.4512 28.2109 m
361.6533 62.9287 L
364.9512 62.7148 L
362.751 28.001 L
359.4512 28.2109 L
359.4512 28.2109 L
f
U
u
372.1221 28.168 m
373.2227 57.9248 L
376.5283 57.8018 L
375.4248 28.041 L
372.1221 28.168 L
372.1221 28.168 L
f
U
u
385.8975 28.1045 m
385.8975 57.3105 L
389.2021 57.3105 L
389.2021 28.1045 L
385.8975 28.1045 L
385.8975 28.1045 L
f
U
u
399.125 28.1045 m
399.125 55.6572 L
402.4277 55.6572 L
402.4277 28.1045 L
399.125 28.1045 L
399.125 28.1045 L
f
U
u
410.1455 32.5127 m
410.1455 53.4551 L
413.4512 53.4551 L
413.4512 32.5127 L
410.1455 32.5127 L
410.1455 32.5127 L
f
U
0.764706 0.513725 0.015686 0 0.27451 0.462745 0.721569 Xa
479.582 35.2686 m
488.9512 28.1045 502.7266 28.1045 v
497.2158 36.3682 499.9717 39.127 v
534.6895 43.5352 545.1621 89.2744 v
572.1641 87.6211 577.125 110.2148 V
570.5576 112.7422 558.1865 114.7344 546.7168 101.3584 C
546.0889 106.0439 549.2441 118.7578 531.9336 122.3379 C
522.5693 111.8691 535.7959 93.6836 v
539.6514 89.8232 l
528.0791 79.9063 519.8105 79.9063 v
487.8477 169.7314 411.248 166.4229 v
324.7285 173.0332 318.1152 73.292 v
358.3438 49.0449 421.168 49.0449 v
421.9932 48.2178 425.5752 44.6377 v
401.8809 13.7764 321.4219 40.7783 v
313.707 29.2061 346.7715 24.7969 v
420.6162 16.5322 479.582 35.2686 v
f
0.835294 0.623529 0.129412 0.011765 0.235294 0.396078 0.619608 Xa
449.8223 61.168 m
433.292 69.9854 423.3721 51.249 V
427.7822 76.0479 449.8223 61.168 v
f
U
u
1 Ap
0 0 0 0 1 1 1 Xa
430.5508 72.8789 m
430.5508 66.3545 425.2617 61.0645 418.7373 61.0645 c
412.2158 61.0645 406.9238 66.3545 406.9238 72.8789 c
406.9238 79.4004 412.2158 84.6885 418.7373 84.6885 c
425.2617 84.6885 430.5508 79.4004 430.5508 72.8789 c
f
0 Ap
0.862745 0.854902 0.443137 0.478431 0.164706 0.145098 0.262745 Xa
418.7236 78.1787 m
414.8027 78.4336 411.416 75.4619 411.1582 71.54 c
411.0967 70.5986 411.8076 69.7891 412.75 69.7266 c
413.6943 69.6631 414.5078 70.3799 414.5674 71.3174 c
414.7041 73.3555 416.4619 74.8994 418.502 74.7705 c
420.541 74.6318 422.0801 72.875 421.9531 70.8359 c
421.8887 69.8965 422.6035 69.0811 423.5488 69.0176 c
424.4883 68.959 425.2998 69.6699 425.3633 70.6162 c
425.6152 74.5371 422.6455 77.9199 418.7236 78.1787 c
f
U
1 Ap
0.835294 0.623529 0.129412 0.011765 0.235294 0.396078 0.619608 Xa
425.4434 156.0381 m
425.4434 153.5684 418.2148 151.5654 409.3018 151.5654 c
400.3857 151.5654 393.1592 153.5684 393.1592 156.0381 c
393.1592 158.5078 400.3857 160.5127 409.3018 160.5127 c
418.2148 160.5127 425.4434 158.5078 425.4434 156.0381 c
f
U
u
0 Ap
0.211765 0.980392 1 0.129412 0.694118 0.137255 0.121569 Xa
378.9717 435.9854 m
382.7666 435.2231 L
382.8799 434.0991 L
384.04 422.8013 L
376.9424 425.5298 L
378.9717 435.9854 L
f
352.7314 430.3057 m
356.3408 431.7041 L
357.0439 430.8179 L
364.0967 421.9165 L
356.6475 420.3994 L
352.7314 430.3057 L
f
1 Ap
0.047059 0.952941 0.87451 0.003922 0.890196 0.188235 0.203922 Xa
371.8193 444.3174 m
372.1221 438.0342 377.46 433.1836 383.7432 433.4858 c
390.0264 433.7886 394.876 439.1265 394.5732 445.4087 c
394.2725 451.6909 388.9326 456.5405 382.6514 456.2402 c
376.3682 455.938 371.5186 450.6001 371.8193 444.3174 c
f
u
0 Ap
0.211765 0.980392 1 0.129412 0.694118 0.137255 0.121569 Xa
328.8779 418.4883 m
328.8721 418.5586 328.9697 418.7432 329.001 418.7847 c
330.6943 421.0723 333.0127 420.9629 333.9541 420.8364 c
334.1123 420.8198 334.1201 420.8013 334.1455 420.7476 C
334.1436 420.6006 336.3838 415.3906 340.54 411.4854 c
344.5518 407.4888 349.7334 404.6812 349.7158 404.6831 C
349.6221 404.6045 355.5811 400.4985 355.3174 400.5669 C
357.6611 398.751 358.9678 396.7817 354.0635 397.6567 C
351.1084 398.0356 347.1553 399.5244 347.167 399.5605 C
347.1982 399.5737 341.4463 402.5776 336.6572 407.2861 c
331.6885 411.8706 328.8506 418.3311 328.8779 418.4883 C
f
381.2627 417.8784 m
381.3428 418.043 381.374 418.0522 381.46 418.0771 C
381.6904 417.9189 390.0967 420.6396 397.4365 425.9976 c
404.8486 431.1143 411.3408 437.5425 411.3369 437.5229 C
411.3975 437.4243 419.8467 444.6748 419.5713 444.3237 C
423.0869 447.1274 426.0205 448.4692 421.9834 442.2656 C
419.708 438.5073 415.6865 433.7407 415.6631 433.7603 C
415.6572 433.7788 408.917 427.0205 400.915 421.4492 c
393.0771 415.6265 383.292 412.3652 382.9404 412.5396 C
382.8389 412.5352 382.6064 412.6421 382.5557 412.6748 c
379.8252 414.4907 380.7354 416.8921 381.2627 417.8784 C
f
U
400.1006 409.5806 m
399.4482 410.6489 408.29 416.7778 409.0537 417.2231 c
413.2725 419.6841 429.0674 424.3999 431.7822 417.3286 c
434.04 411.4458 422.6924 410.707 419.8135 410.6279 c
408.3467 410.0918 402.9072 404.9722 v
400.1025 409.5742 400.1006 409.5806 v
f
404.0088 402.1738 m
403.8115 402.8809 414.3721 405.1069 415.0459 405.1987 c
419.708 405.8345 427.9932 406.4473 431.8486 403.3335 c
439.209 397.3906 427.9619 394.0845 423.1572 394.5518 c
408.9756 399.6558 405.1865 397.9165 v
404.0088 402.1738 l
f
405.6104 396.8398 m
409.2393 396.2578 412.8389 395.1499 416.2607 393.8198 c
420.7002 392.0938 429.8018 389.1079 431.2041 383.9312 c
433.2959 376.2017 421.5479 381.2075 418.9287 383.1982 c
418.9268 383.1982 409.0088 390.7241 404.8955 392.3369 c
405.6104 396.8398 L
f
400.751 388.5176 m
407.8291 380.6245 410.2646 370.6523 v
410.9756 367.7417 414.501 366.7437 416.4443 368.8413 c
418.6729 371.2515 416.8682 374.2437 415.6533 376.5742 c
412.8271 382.0117 409.4072 391.0273 402.0557 391.5161 c
400.751 388.5176 L
f
341.0283 399.6328 m
341.4209 401.2979 329.0166 403.064 328.0674 403.0693 c
323.0615 403.1001 315.9385 400.167 312.3955 396.6865 c
310.7646 395.0859 308.8135 391.895 310.0771 389.5073 c
311.8506 386.1543 316.6689 388.4517 319.1416 389.9028 c
333.0947 397.3823 339.7764 394.2949 v
341.0264 399.6245 341.0283 399.6328 v
f
339.7607 391.8037 m
315.0518 388.2954 311.8994 377.3633 v
309.8154 365.6123 318.958 372.6875 v
333.1084 384.7139 340.5029 386.1333 v
339.7607 391.8037 l
f
341.4639 381.79 m
320.4971 371.3047 321.2139 361.8984 v
322.4014 351.9292 331.79 364.0698 v
343.042 379.6782 l
341.4639 381.79 l
f
346.0713 376.397 m
330.6396 358.1509 334.0713 350.0605 v
336.8252 343.6904 341.6162 355.5127 v
349.0693 375.0928 l
346.0713 376.397 l
f
0.047059 0.952941 0.87451 0.003922 0.890196 0.188235 0.203922 Xa
341.0283 399.6328 m
353.6943 429.9595 370.0635 431.9287 Y
400.4443 428.5991 406.5693 395.9771 Y
406.3232 388.9775 403.0459 383.8765 398.3877 380.1567 C
396.0166 382.2095 392.5908 382.96 389.5283 381.729 c
384.4189 379.6753 379.542 376.8311 374.4365 376.6787 C
374.6494 376.7246 372.9326 376.8599 372.8428 376.8784 c
372.4736 376.9438 372.1104 377.0327 371.7471 377.1187 C
371.4131 377.2432 369.9072 377.7144 369.7002 377.7866 c
367.2471 378.6563 364.7705 379.4556 362.2314 380.0518 c
357.6338 381.1318 353.0361 377.2192 352.3506 372.8286 c
352.3057 372.5396 352.2783 372.2559 352.2607 371.9751 C
333.6396 378.4834 341.0283 399.6328 Y
f
0.007843 0.364706 0.184314 0 0.960784 0.694118 0.701961 Xa
376.833 403.3477 m
361.1885 405.3066 352.2119 387.1987 351.958 372.0811 C
354.8506 371.0288 358.3838 370.3345 362.6943 370.1431 C
385.3643 370.0176 398.1182 379.9482 V
394.874 391.1787 389.126 401.2129 376.833 403.3477 C
f
0.211765 0.980392 1 0.129412 0.694118 0.137255 0.121569 Xa
374.0713 416.0513 m
373.8447 415.1421 373.7432 414.6763 373.6904 413.853 C
374.2627 412.6064 370.7178 409.479 370.4092 409.9365 C
370.4326 409.9136 369.292 409.5181 368.042 409.6177 C
366.7529 409.6714 365.7158 410.5215 365.4404 410.8413 C
364.9482 411.4688 364.5928 411.771 363.9385 412.437 C
363.7471 411.5796 363.7334 410.8467 364.4131 409.9595 c
364.7686 409.4829 366.2842 408.311 367.9248 408.2612 C
369.5186 408.1372 370.8877 408.6465 370.8701 408.665 C
370.8545 408.6753 372.2725 409.0781 373.3975 410.2432 C
374.6299 411.3364 375.0303 413.1855 375.04 413.7466 c
375.0889 414.8389 374.665 415.4126 374.0713 416.0513 C
f
u
0.047059 0.952941 0.87451 0.003922 0.890196 0.188235 0.203922 Xa
327.4033 433.9375 m
329.9189 444.6777 l
349.9287 427.0981 332.7061 413.5 v
312.1904 416.9014 308.9463 435.5879 v
305.2939 452.0039 320.4971 457.3813 v
325.6846 435.8477 327.4033 433.9375 v
f
U
u
420.083 449.9878 m
420.6143 461.0068 l
396.5439 449.5996 409.3662 431.7944 v
430.0264 429.4277 438.2813 446.502 v
446.3008 461.2856 433.165 470.6323 v
422.2588 451.3516 420.083 449.9878 v
f
U
u
1 Ap
0 0 0 0 1 1 1 Xa
374.4443 442.7842 m
374.6553 438.3984 378.3818 435.0142 382.7666 435.2231 c
387.1494 435.4346 390.5361 439.1606 390.3252 443.5454 c
390.1162 447.9307 386.3877 451.3145 382.0049 451.103 c
377.6201 450.894 374.2334 447.1689 374.4443 442.7842 c
f
0 Ap
0.211765 0.980392 1 0.129412 0.694118 0.137255 0.121569 Xa
382.2236 446.728 m
384.8506 447.0269 387.2256 445.1377 387.5225 442.5107 c
387.5947 441.8804 387.1436 441.313 386.5107 441.2407 c
385.8799 441.167 385.3096 441.6226 385.2373 442.249 c
385.0791 443.6157 383.8486 444.5972 382.4834 444.4438 c
381.1162 444.2856 380.1396 443.0547 380.29 441.6899 c
380.3623 441.0605 379.9092 440.4878 379.2764 440.4155 c
378.6475 440.3462 378.0791 440.7974 378.0049 441.4312 c
377.71 444.0586 379.5967 446.4277 382.2236 446.728 c
f
U
1 Ap
0.047059 0.952941 0.87451 0.003922 0.890196 0.188235 0.203922 Xa
340.4521 437.9917 m
341.917 431.875 348.0635 428.1025 354.1807 429.5664 c
360.2998 431.0303 364.0713 437.1768 362.6064 443.2944 c
361.1436 449.4111 354.9951 453.1841 348.8779 451.7202 c
342.7607 450.2554 338.9893 444.1104 340.4521 437.9917 c
f
u
0 0 0 0 1 1 1 Xa
343.3154 436.9741 m
344.3389 432.7046 348.6299 430.0703 352.8975 431.0923 c
357.167 432.1133 359.8018 436.4048 358.7783 440.6743 c
357.7568 444.9438 353.4678 447.5747 349.1982 446.5537 c
344.9287 445.5317 342.2939 441.2427 343.3154 436.9741 c
f
0 Ap
0.211765 0.980392 1 0.129412 0.694118 0.137255 0.121569 Xa
350.2256 442.2954 m
352.7529 443.0771 355.4365 441.6631 356.2178 439.1367 c
356.4053 438.5288 356.0674 437.8882 355.46 437.6997 c
354.8506 437.5093 354.208 437.8521 354.0225 438.4556 c
353.6123 439.7671 352.2178 440.5034 350.9053 440.0986 c
349.5928 439.6895 348.8623 438.2993 349.2646 436.9844 c
349.4521 436.3799 349.1123 435.7339 348.5029 435.5444 c
347.8994 435.3599 347.2549 435.6973 347.0654 436.3062 c
346.2881 438.8325 347.7002 441.5117 350.2256 442.2954 c
f
U
U
u
0.047059 0.952941 0.87451 0.003922 0.890196 0.188235 0.203922 Xa
225.9282 512.0054 m
226.4556 500.7637 232.1089 493.1089 242.3521 488.6685 C
235.437 481.7529 l
256.1812 482.6167 l
252.7241 487.8047 L
260.1558 493.1885 264.6567 502.0732 268.2837 512.0054 C
253.0356 527.6577 225.9282 512.0054 V
f
0.007843 0.364706 0.184314 0 0.960784 0.694118 0.701961 Xa
232.2935 514.5244 m
240.8218 491.6523 l
242.5161 492.8325 l
234.1626 515.7109 l
232.2935 514.5244 l
f
261.5591 515.1548 m
253.5298 492.1035 l
255.5874 491.9292 l
263.7573 514.8755 l
261.5591 515.1548 l
f
247.0327 520.3638 m
247.1118 491.9292 l
249.3599 492.5693 l
249.4692 520.9458 l
247.0327 520.3638 l
f
U
u
0.211765 0.980392 1 0.129412 0.694118 0.137255 0.121569 Xa
399.5156 512.0054 m
400.043 500.7637 405.6973 493.1089 415.9395 488.6685 C
409.0254 481.7529 l
429.7695 482.6167 l
426.3125 487.8047 L
433.7441 493.1885 438.2441 502.0732 441.8711 512.0054 C
426.623 527.6577 399.5156 512.0054 V
f
0.094118 0.356863 0.243137 0 0.886275 0.678431 0.670588 Xa
405.8809 514.5244 m
414.4102 491.6523 l
416.1035 492.8325 l
407.75 515.7109 l
405.8809 514.5244 l
f
435.1465 515.1548 m
427.1172 492.1035 l
429.1758 491.9292 l
437.3457 514.8755 l
435.1465 515.1548 l
f
420.6211 520.3638 m
420.6992 491.9292 l
422.9473 492.5693 l
423.0566 520.9458 l
420.6211 520.3638 l
f
U
u
0.054902 0 0.015686 0 0.929412 0.968627 0.976471 Xa
168.0664 512.0054 m
168.5947 500.7637 174.2471 493.1089 184.4893 488.6685 C
177.5732 481.7529 l
198.3203 482.6167 l
194.8623 487.8047 L
202.2939 493.1885 206.7949 502.0732 210.4209 512.0054 C
195.1738 527.6577 168.0664 512.0054 V
f
0.019608 0 0.003922 0 0.972549 0.988235 0.992157 Xa
174.4307 514.5244 m
182.96 491.6523 l
184.6553 492.8311 l
176.2998 515.7109 l
174.4307 514.5244 l
f
203.6992 515.1538 m
195.6689 492.1035 l
197.7246 491.9292 l
205.8955 514.8755 l
203.6992 515.1538 l
f
189.1699 520.3638 m
189.25 491.9277 l
191.499 492.5693 l
191.6064 520.9458 l
189.1699 520.3638 l
f
U
u
0.764706 0.513725 0.015686 0 0.27451 0.462745 0.721569 Xa
283.791 512.0054 m
284.3193 500.7637 289.9707 493.1089 300.2148 488.6685 C
293.2998 481.7529 l
314.0439 482.6167 l
310.5859 487.8047 L
318.0186 493.1885 322.5205 502.0732 326.1455 512.0054 C
310.8984 527.6577 283.791 512.0054 V
f
0.254902 0.133333 0.023529 0 0.729412 0.8 0.894118 Xa
290.1553 514.5244 m
298.6855 491.6523 l
300.3789 492.8311 l
292.0244 515.7109 l
290.1553 514.5244 l
f
319.4229 515.1538 m
311.3926 492.1035 l
313.4492 491.9292 l
321.6191 514.8755 l
319.4229 515.1538 l
f
304.8936 520.3638 m
304.9756 491.9277 l
307.2227 492.5693 l
307.3311 520.9458 l
304.8936 520.3638 l
f
U
u
0.862745 0.854902 0.443137 0.478431 0.164706 0.145098 0.262745 Xa
341.6533 512.0054 m
342.1816 500.7637 347.833 493.1089 358.0771 488.6685 C
351.1621 481.7529 l
371.9063 482.6167 l
368.4482 487.8047 L
375.8809 493.1885 380.3828 502.0732 384.0078 512.0054 C
368.7607 527.6577 341.6533 512.0054 V
f
0.321569 0.27451 0.188235 0 0.686275 0.678431 0.72549 Xa
348.0176 514.5244 m
356.5479 491.6523 l
358.2412 492.8311 l
349.8867 515.7109 l
348.0176 514.5244 l
f
377.2852 515.1538 m
369.2549 492.1035 l
371.3115 491.9292 l
379.4814 514.8755 l
377.2852 515.1538 l
f
362.7559 520.3638 m
362.8379 491.9277 l
365.085 492.5693 l
365.1934 520.9458 l
362.7559 520.3638 l
f
U
u
*u
1 D
0.862745 0.854902 0.443137 0.478431 0.164706 0.145098 0.262745 Xa
365.3838 290.5195 m
352.0996 294.5889 338.0205 293.4648 325.8076 287.9023 C
316.0449 306.8945 L
298.8574 298.7148 L
313.0986 279.8896 L
307.9951 275.6191 303.5635 270.3643 300.1333 264.1992 c
296.8916 258.3721 294.8066 252.2139 293.7959 245.9922 C
272.9971 247.0068 L
271.4878 228.0313 L
293.4336 230.7725 L
294.9966 216.8916 301.7129 203.7617 312.7461 194.3838 C
303.3379 179.7832 L
319.0146 168.9893 L
326.165 185.9277 L
340.5254 179.4756 356.4023 179.5713 370.1797 185.1807 C
376.7256 172.4473 L
393.9141 180.627 L
384.2061 193.4531 L
389.6416 197.8369 394.3457 203.3066 397.9482 209.7822 c
402.0703 217.1885 404.3193 225.1289 404.8711 233.0615 C
419.7725 232.334 L
421.2822 251.3086 L
403.6699 249.1094 L
400.5693 263.0576 392.1729 275.7607 379.4033 283.9932 C
389.4297 299.5591 L
373.7549 310.3521 L
365.3838 290.5195 L
f
/BBAccumRotation (1.063105) XT
0 D
335.4111 269.2207 m
342.085 271.4473 349.4443 271.542 356.3857 269.2061 C
349.1631 252.0977 L
347.4688 252.584 345.7246 252.6904 344.0322 252.4492 C
335.4111 269.2207 L
f
/BBAccumRotation (1.063105) XT
317 253.9404 m
319.1719 257.8457 322.0195 261.1348 325.3154 263.748 C
336.7246 248.6709 L
336.0342 247.9375 335.4131 247.1201 334.8994 246.1992 c
334.5098 245.4951 334.2012 244.7705 333.957 244.0332 C
313.6113 245.0264 L
314.2871 248.0713 315.4053 251.0762 317 253.9404 c
f
/BBAccumRotation (1.063105) XT
348.9639 245.9951 m
351.958 244.3311 353.0352 240.5557 351.3691 237.5625 c
349.7041 234.5703 345.9297 233.4941 342.9355 235.1602 c
339.9424 236.8242 338.8672 240.5986 340.5313 243.5908 c
342.1973 246.584 345.9727 247.6592 348.9639 245.9951 c
f
/BBAccumRotation (1.063105) XT
313.1602 233.2344 m
334.1133 235.8506 L
334.6875 234.2939 335.5674 232.8496 336.7334 231.6172 C
324.5146 212.6543 L
318.2178 217.9785 314.2803 225.3652 313.1602 233.2344 C
f
/BBAccumRotation (1.063105) XT
358.7402 207.4316 m
351.3252 204.3066 342.8398 203.9023 334.9316 206.6914 C
343.8779 227.8877 L
345.3193 227.665 346.7734 227.6953 348.1787 227.9756 C
358.7402 207.4316 L
f
/BBAccumRotation (1.063105) XT
374.7656 221.8037 m
373.1035 218.8164 371.0479 216.1885 368.6992 213.9473 C
355.082 231.9443 L
355.6582 232.6016 356.1787 233.3223 356.6191 234.1162 c
356.8506 234.5313 357.0479 234.957 357.2305 235.3857 C
378.7529 234.3369 L
378.2939 230.0576 376.9893 225.7998 374.7656 221.8037 c
f
/BBAccumRotation (1.063105) XT
377.9355 245.9023 m
357.7549 243.3779 L
357.3682 244.8203 356.7178 246.1875 355.8369 247.4131 C
366.3877 263.793 L
372.2441 259.1709 376.2012 252.8223 377.9355 245.9023 C
f
/BBAccumRotation (1.063105) XT
*U
U
u
*u
1 D
0.764706 0.513725 0.015686 0 0.27451 0.462745 0.721569 Xa
509.6377 306.7095 m
511.6143 329.7056 L
489.0039 319.3052 L
498.9199 313.2534 L
480.5254 296.8848 463.8926 289.584 449.6582 291.1563 C
465.7197 347.8584 L
486.2012 343.5503 L
491.0605 350.897 L
467.7373 354.9814 L
472.4775 371.7134 L
476.9199 373.5122 480.5127 377.2729 481.9063 382.2437 c
484.293 390.7642 479.3193 399.6069 470.8008 401.9941 c
462.2803 404.3809 453.4375 399.4082 451.0508 390.8882 c
449.2285 384.3853 451.6973 377.6982 456.7559 373.834 C
453.4414 357.4868 L
428.2832 361.8921 L
428.1943 355.751 L
452.0713 350.7285 L
440.4775 293.542 L
427.5957 298.9727 417.1621 312.9106 409.7822 335.1938 C
419.1436 337.4585 L
404.2773 355.1143 L
395.6465 331.7749 L
404.5449 333.9258 L
404.5313 319.4155 408.0703 291.7539 439.8086 270.4844 C
478.624 275.3828 501.2373 311.8379 V
509.6377 306.7095 L
f
0 D
457.5508 389.0679 m
458.9326 393.998 464.0488 396.8755 468.9805 395.4946 c
473.9092 394.1133 476.7871 388.9956 475.4063 384.0664 c
474.0254 379.1348 468.9072 376.2578 463.9775 377.6392 c
459.0459 379.0205 456.1689 384.1367 457.5508 389.0679 c
f
*U
U
0.047059 0.952941 0.87451 0.003922 0.890196 0.188235 0.203922 Xa
568.3457 312.7207 m
568.4531 313.2549 569.2158 313.2549 569.3232 312.7207 c
572.2422 298.1875 l
572.3799 297.5 573.0244 297.0322 573.7217 297.1123 c
588.4443 298.8281 l
588.9854 298.8916 589.2217 298.165 588.7471 297.8975 c
575.8271 290.6328 l
575.2158 290.2891 574.9697 289.5313 575.2627 288.8936 c
581.4443 275.4209 l
581.6709 274.9258 581.0537 274.4766 580.6514 274.8457 c
569.749 284.8877 l
569.2334 285.3633 568.4365 285.3633 567.9209 284.8877 c
557.0176 274.8457 l
556.6162 274.4766 555.999 274.9258 556.2256 275.4209 c
562.4072 288.8936 l
562.7002 289.5313 562.4541 290.2891 561.8428 290.6328 c
548.9229 297.8975 l
548.4482 298.165 548.6846 298.8916 549.2256 298.8281 c
563.9482 297.1123 l
564.6455 297.0322 565.29 297.5 565.4268 298.1875 c
568.3457 312.7207 l
f
293.6128 357.4771 m
293.7202 358.0112 294.4829 358.0112 294.5903 357.4771 c
297.5093 342.9438 l
297.647 342.2563 298.2915 341.7886 298.9888 341.8687 c
313.7109 343.5845 l
314.252 343.6479 314.4883 342.9214 314.0137 342.6538 c
301.0938 335.3892 l
300.4829 335.0454 300.2368 334.2876 300.5298 333.6499 c
306.7109 320.1772 l
306.9375 319.6821 306.3203 319.2329 305.918 319.6021 c
295.0161 329.644 l
294.5005 330.1196 293.7036 330.1196 293.188 329.644 c
282.2847 319.6021 l
281.8833 319.2329 281.2661 319.6821 281.4927 320.1772 c
287.6743 333.6499 l
287.9673 334.2876 287.7212 335.0454 287.1099 335.3892 c
274.1899 342.6538 l
273.7153 342.9214 273.9517 343.6479 274.4927 343.5845 c
289.2153 341.8687 l
289.9126 341.7886 290.5571 342.2563 290.6938 342.9438 c
293.6128 357.4771 l
f
31.5967 357.4771 m
31.7041 358.0112 32.4668 358.0112 32.5742 357.4771 c
35.4932 342.9438 l
35.6309 342.2563 36.2754 341.7886 36.9727 341.8687 c
51.6948 343.5845 l
52.2358 343.6479 52.4722 342.9214 51.9976 342.6538 c
39.0776 335.3892 l
38.4668 335.0454 38.2207 334.2876 38.5137 333.6499 c
44.6948 320.1772 l
44.9214 319.6821 44.3042 319.2329 43.9019 319.6021 c
33 329.644 l
32.4844 330.1196 31.6875 330.1196 31.1719 329.644 c
20.2686 319.6021 l
19.8672 319.2329 19.25 319.6821 19.4766 320.1772 c
25.6582 333.6499 l
25.9512 334.2876 25.7051 335.0454 25.0938 335.3892 c
12.1738 342.6538 l
11.6992 342.9214 11.9355 343.6479 12.4766 343.5845 c
27.1992 341.8687 l
27.8965 341.7886 28.541 342.2563 28.6777 342.9438 c
31.5967 357.4771 l
f
0.764706 0.513725 0.015686 0 0.27451 0.462745 0.721569 Xa
301.7764 148.6094 m
301.8838 149.1436 302.6465 149.1436 302.7539 148.6094 c
305.6729 134.0762 l
305.8105 133.3887 306.4551 132.9209 307.1523 133.001 c
321.875 134.7168 l
322.416 134.7803 322.6523 134.0537 322.1777 133.7861 c
309.2578 126.5215 l
308.6465 126.1777 308.4004 125.4199 308.6934 124.7822 c
314.875 111.3096 l
315.1016 110.8145 314.4844 110.3652 314.082 110.7344 c
303.1797 120.7764 l
302.6641 121.252 301.8672 121.252 301.3516 120.7764 c
290.4482 110.7344 l
290.0469 110.3652 289.4297 110.8145 289.6563 111.3096 c
295.8379 124.7822 l
296.1309 125.4199 295.8848 126.1777 295.2734 126.5215 c
282.3535 133.7861 l
281.8789 134.0537 282.1152 134.7803 282.6563 134.7168 c
297.3789 133.001 l
298.0762 132.9209 298.7207 133.3887 298.8574 134.0762 c
301.7764 148.6094 l
f
0.047059 0.952941 0.87451 0.003922 0.890196 0.188235 0.203922 Xa
564.9385 60.8271 m
565.0459 61.3613 565.8086 61.3613 565.916 60.8271 c
568.835 46.2939 l
568.9727 45.6064 569.6172 45.1387 570.3145 45.2188 c
585.0371 46.9346 l
585.5781 46.998 585.8145 46.2715 585.3398 46.0039 c
572.4199 38.7393 l
571.8086 38.3955 571.5625 37.6377 571.8555 37 c
578.0371 23.5273 l
578.2637 23.0322 577.6465 22.583 577.2441 22.9521 c
566.3418 32.9941 l
565.8262 33.4697 565.0293 33.4697 564.5137 32.9941 c
553.6104 22.9521 l
553.209 22.583 552.5918 23.0322 552.8184 23.5273 c
559 37 l
559.293 37.6377 559.0469 38.3955 558.4355 38.7393 c
545.5156 46.0039 l
545.041 46.2715 545.2773 46.998 545.8184 46.9346 c
560.541 45.2188 l
561.2383 45.1387 561.8828 45.6064 562.0195 46.2939 c
564.9385 60.8271 l
f
0.764706 0.513725 0.015686 0 0.27451 0.462745 0.721569 Xa
515.1543 384.5015 m
515.2393 384.9243 515.8438 384.9243 515.9287 384.5015 c
518.2393 372.9951 l
518.3486 372.4507 518.8584 372.0806 519.4111 372.1436 c
531.0674 373.5024 l
531.4951 373.5527 531.6826 372.9775 531.3066 372.7656 c
521.0781 367.0137 l
520.5938 366.7417 520.3984 366.1416 520.6309 365.6367 c
525.5254 354.9702 l
525.7041 354.5781 525.2158 354.2227 524.8975 354.5146 c
516.2656 362.4653 l
515.8574 362.8418 515.2266 362.8418 514.8184 362.4653 c
506.1855 354.5146 l
505.8682 354.2227 505.3789 354.5781 505.5586 354.9702 c
510.4531 365.6367 l
510.6846 366.1416 510.4902 366.7417 510.0059 367.0137 c
499.7764 372.7656 l
499.4014 372.9775 499.5879 373.5527 500.0166 373.5024 c
511.6729 372.1436 l
512.2246 372.0806 512.7354 372.4507 512.8438 372.9951 c
515.1543 384.5015 l
f
0.054902 0 0.015686 0 0.929412 0.968627 0.976471 Xa
359.915 350.5063 m
360 350.9292 360.6045 350.9292 360.6895 350.5063 c
363 339 l
363.1094 338.4556 363.6191 338.0854 364.1719 338.1484 c
375.8281 339.5073 l
376.2559 339.5576 376.4434 338.9824 376.0674 338.7705 c
365.8389 333.0186 l
365.3545 332.7466 365.1592 332.1465 365.3916 331.6416 c
370.2861 320.9751 l
370.4648 320.583 369.9766 320.2275 369.6582 320.5195 c
361.0264 328.4702 l
360.6182 328.8467 359.9873 328.8467 359.5791 328.4702 c
350.9463 320.5195 l
350.6289 320.2275 350.1396 320.583 350.3193 320.9751 c
355.2139 331.6416 l
355.4453 332.1465 355.251 332.7466 354.7666 333.0186 c
344.5371 338.7705 l
344.1621 338.9824 344.3486 339.5576 344.7773 339.5073 c
356.4336 338.1484 l
356.9854 338.0854 357.4961 338.4556 357.6045 339 c
359.915 350.5063 l
f
175.5659 187.4668 m
175.6509 187.8887 176.2554 187.8887 176.3403 187.4668 c
178.6509 175.96 l
178.7603 175.416 179.27 175.0449 179.8228 175.1084 c
191.479 176.4668 l
191.9067 176.5176 192.0942 175.9424 191.7183 175.7305 c
181.4897 169.9785 l
181.0054 169.707 180.8101 169.1064 181.0425 168.6016 c
185.937 157.9355 l
186.1157 157.543 185.6274 157.1875 185.3091 157.4795 c
176.6772 165.4297 l
176.269 165.8066 175.6382 165.8066 175.23 165.4297 c
166.5972 157.4795 l
166.2798 157.1875 165.7905 157.543 165.9702 157.9355 c
170.8647 168.6016 l
171.0962 169.1064 170.9019 169.707 170.4175 169.9785 c
160.188 175.7305 l
159.813 175.9424 159.9995 176.5176 160.4282 176.4668 c
172.0845 175.1084 l
172.6362 175.0449 173.147 175.416 173.2554 175.96 c
175.5659 187.4668 l
f
117.4048 387.6597 m
117.4897 388.0815 118.0942 388.0815 118.1792 387.6597 c
120.4897 376.1528 l
120.5991 375.6089 121.1089 375.2378 121.6616 375.3013 c
133.3179 376.6597 l
133.7456 376.7104 133.9331 376.1353 133.5571 375.9233 c
123.3286 370.1714 l
122.8442 369.8999 122.6489 369.2993 122.8813 368.7944 c
127.7759 358.1284 l
127.9546 357.7358 127.4663 357.3804 127.1479 357.6724 c
118.5161 365.6226 l
118.1079 365.9995 117.4771 365.9995 117.0688 365.6226 c
108.436 357.6724 l
108.1187 357.3804 107.6294 357.7358 107.8091 358.1284 c
112.7036 368.7944 l
112.9351 369.2993 112.7407 369.8999 112.2563 370.1714 c
102.0269 375.9233 l
101.6519 376.1353 101.8384 376.7104 102.2671 376.6597 c
113.9233 375.3013 l
114.4751 375.2378 114.9858 375.6089 115.0942 376.1528 c
117.4048 387.6597 l
f
0.862745 0.854902 0.443137 0.478431 0.164706 0.145098 0.262745 Xa
189.2754 379.353 m
189.3604 379.7759 189.9648 379.7759 190.0498 379.353 c
192.3604 367.8467 l
192.4697 367.3022 192.9795 366.9321 193.5322 366.9951 c
205.1885 368.354 l
205.6162 368.4043 205.8037 367.8291 205.4277 367.6172 c
195.1992 361.8652 l
194.7148 361.5933 194.5195 360.9932 194.752 360.4883 c
199.6465 349.8218 l
199.8252 349.4297 199.3369 349.0742 199.0186 349.3662 c
190.3867 357.3169 l
189.9785 357.6934 189.3477 357.6934 188.9395 357.3169 c
180.3066 349.3662 l
179.9893 349.0742 179.5 349.4297 179.6797 349.8218 c
184.5742 360.4883 l
184.8057 360.9932 184.6113 361.5933 184.127 361.8652 c
173.8975 367.6172 l
173.5225 367.8291 173.709 368.4043 174.1377 368.354 c
185.7939 366.9951 l
186.3457 366.9321 186.8564 367.3022 186.9648 367.8467 c
189.2754 379.353 l
f
0.211765 0.980392 1 0.129412 0.694118 0.137255 0.121569 Xa
183.0156 238.4883 m
183.1006 238.9102 183.7051 238.9102 183.79 238.4883 c
186.1006 226.9814 l
186.21 226.4375 186.7197 226.0664 187.2725 226.1299 c
198.9287 227.4883 l
199.3564 227.5391 199.5439 226.9639 199.168 226.752 c
188.9395 221 l
188.4551 220.7285 188.2598 220.1279 188.4922 219.623 c
193.3867 208.957 l
193.5654 208.5645 193.0771 208.209 192.7588 208.501 c
184.127 216.4512 l
183.7188 216.8281 183.0879 216.8281 182.6797 216.4512 c
174.0469 208.501 l
173.7295 208.209 173.2402 208.5645 173.4199 208.957 c
178.3145 219.623 l
178.5459 220.1279 178.3516 220.7285 177.8672 221 c
167.6377 226.752 l
167.2627 226.9639 167.4492 227.5391 167.8779 227.4883 c
179.5342 226.1299 l
180.0859 226.0664 180.5967 226.4375 180.7051 226.9814 c
183.0156 238.4883 l
f
515.8711 153.0068 m
515.9561 153.4287 516.5605 153.4287 516.6455 153.0068 c
518.9561 141.5 l
519.0654 140.9561 519.5752 140.585 520.1279 140.6484 c
531.7842 142.0068 l
532.2119 142.0576 532.3994 141.4824 532.0234 141.2705 c
521.7949 135.5186 l
521.3105 135.2471 521.1152 134.6465 521.3477 134.1416 c
526.2422 123.4756 l
526.4209 123.083 525.9326 122.7275 525.6143 123.0195 c
516.9824 130.9697 l
516.5742 131.3467 515.9434 131.3467 515.5352 130.9697 c
506.9023 123.0195 l
506.585 122.7275 506.0957 123.083 506.2754 123.4756 c
511.1699 134.1416 l
511.4014 134.6465 511.207 135.2471 510.7227 135.5186 c
500.4932 141.2705 l
500.1182 141.4824 500.3047 142.0576 500.7334 142.0068 c
512.3896 140.6484 l
512.9414 140.585 513.4521 140.9561 513.5605 141.5 c
515.8711 153.0068 l
f
0.764706 0.513725 0.015686 0 0.27451 0.462745 0.721569 Xa
68.0308 512.2378 m
68.1382 512.772 68.9014 512.772 69.0088 512.2378 c
71.9272 497.7046 l
72.0654 497.0171 72.7095 496.5493 73.4063 496.6294 c
88.1299 498.3452 l
88.6709 498.4087 88.9067 497.6821 88.4316 497.4146 c
75.5122 490.1499 l
74.9004 489.8062 74.6548 489.0483 74.9473 488.4106 c
81.1289 474.938 l
81.356 474.4429 80.7383 473.9937 80.3369 474.3628 c
69.4336 484.4048 l
68.918 484.8804 68.1221 484.8804 67.606 484.4048 c
56.7026 474.3628 l
56.3018 473.9937 55.6841 474.4429 55.9111 474.938 c
62.0928 488.4106 l
62.3853 489.0483 62.1392 489.8062 61.5278 490.1499 c
48.6079 497.4146 l
48.1328 497.6821 48.3691 498.4087 48.9102 498.3452 c
63.6338 496.6294 l
64.3301 496.5493 64.9746 497.0171 65.1123 497.7046 c
68.0308 512.2378 l
f
u
0.862745 0.854902 0.443137 0.478431 0.164706 0.145098 0.262745 Xa
256.6719 378.7129 m
257.958 362.54 270.8516 371.5449 v
286.002 382.2261 269.9463 389.4546 v
256.6719 378.7129 l
f
298.4063 431.8008 m
284.29 429.9941 276.9951 405.9707 v
276.0107 397.6465 l
283.8359 369.4697 293.2324 370.4907 v
279.1904 405.7695 298.4063 431.8008 v
f
249.5371 363.0903 m
230.9043 368.7837 223.1152 379.2407 V
218.7725 379.811 L
218.46 379.6025 218.1465 379.3975 217.833 379.1934 C
219.6719 374.5674 230.1768 350.7183 252.7012 346.8564 C
247.4766 357.5205 249.5371 363.0903 V
f
0.764706 0.513725 0.015686 0 0.27451 0.462745 0.721569 Xa
241.6113 440.3247 m
230.3428 440.8516 222.0967 438.1255 216.0967 434.2168 C
215.9863 433.9585 215.8799 433.7017 215.7754 433.4453 C
205.1348 425.355 202.6357 413.7251 y
195.9453 396.2896 184.8545 411.8105 y
179.8066 415.9272 181.4385 408.3589 y
174.8281 406.3071 184.2803 403.1167 184.2803 403.1157 c
189.9102 394.8984 198.5342 388.9189 206.8584 383.7109 c
211.5693 380.7632 216.4072 377.4375 221.7637 375.9048 c
243.1133 369.7944 273.2568 377.5425 277.5615 402.5635 c
277.8262 404.0967 278.0088 405.5635 277.875 407.1074 C
265.6777 438.3423 241.6113 440.3247 Y
f
0.862745 0.854902 0.443137 0.478431 0.164706 0.145098 0.262745 Xa
268.8809 440.6621 m
261.9297 451.1226 250.3516 457.9253 236.2422 455.4321 c
211.1025 452.0454 215.2354 435.8335 215.8867 433.7188 C
216.1055 434.2456 216.3369 434.7793 216.5703 435.312 C
216.3369 434.7793 216.1055 434.2456 215.8867 433.7188 C
215.9326 433.5688 215.9619 433.4863 y
249.2959 450.4731 275.6221 411.5225 275.6221 411.5239 c
277.0254 421.6563 274.4248 432.3228 268.8809 440.6621 c
f
232.4619 412.7246 m
235.7217 405.4434 235.7432 400.0137 V
240.4902 403.5493 244.8096 404.353 248.0039 397.9409 C
247.2559 405.8394 254.9424 421.0059 271.0918 425.2485 C
246.9863 428.5 232.4619 412.7246 v
f
u
1 Ap
0 0 0 0 1 1 1 Xa
226.9863 418.9185 m
228.8584 414.1245 226.4893 408.7217 221.6973 406.8501 c
216.9053 404.979 211.5 407.3467 209.6279 412.1401 c
207.7568 416.9316 210.1279 422.335 214.9199 424.2065 c
219.7119 426.0776 225.1152 423.71 226.9863 418.9185 c
f
/BBAccumRotation (0.372279) XT
0 Ap
0.862745 0.854902 0.443137 0.478431 0.164706 0.145098 0.262745 Xa
216.7773 419.4199 m
213.8232 418.4819 212.1885 415.3262 213.124 412.3716 c
213.3486 411.6621 214.1035 411.2715 214.8145 411.4966 c
215.5244 411.7202 215.916 412.4805 215.6924 413.186 c
215.209 414.7227 216.0566 416.3613 217.5918 416.8506 c
219.1299 417.335 220.7646 416.4868 221.2559 414.9517 c
221.4785 414.2422 222.2373 413.8496 222.9492 414.0737 c
223.6572 414.3003 224.0488 415.0542 223.8252 415.7681 c
222.8828 418.7217 219.7314 420.3545 216.7773 419.4199 c
f
U
227.9785 434.5352 m
234.2637 404.5898 217.0771 383.1123 v
238.5566 397.9731 227.9785 434.5352 v
f
U
39.4956 260.79 m
99.1182 260.79 l
62.3198 237.9658 39.4956 260.79 v
f
u
0.054902 0 0.015686 0 0.929412 0.968627 0.976471 Xa
493.3711 217.4229 m
487.4746 242.6846 l
576.2822 228.126 l
558.8105 175.7148 l
493.3711 217.4229 l
f
u
1 Ap
517.0957 234.3955 m
501.7813 236.9893 L
504.0615 280.8779 L
526.5078 279.5273 L
517.0957 234.3955 L
f
0 Ap
0.047059 0.952941 0.87451 0.003922 0.890196 0.188235 0.203922 Xa
526.5078 279.5273 m
504.0615 280.8779 L
503.6699 273.3252 L
510.8682 273.2773 518.0742 273.4229 525.2959 273.7207 C
526.5078 279.5273 L
f
503.2236 264.7383 m
502.6045 252.833 L
508.9209 253.9326 515.2471 254.9434 521.5752 255.8789 C
524.0166 267.5811 L
517.0791 266.6729 510.1553 265.6914 503.2236 264.7383 C
f
501.7813 236.9893 m
517.0957 234.3955 L
519.6846 246.8086 L
513.7744 245.2539 507.8799 243.6631 502.04 241.9541 C
501.7813 236.9893 L
f
0.862745 0.854902 0.443137 0.478431 0.164706 0.145098 0.262745 Xa
499.8193 292.0146 m
500.7803 279.5957 l
530.083 278.9219 l
533.584 288.7471 l
499.8193 292.0146 l
f
U
429.334 219.6777 m
462.127 162.8809 l
578.3809 159.877 l
595.2998 199.3555 L
495.3818 175.6465 546.1875 231.5322 429.334 219.6777 C
f
u
*u
1 D
0 0 0 0 1 1 1 Xa
491.8066 183.4355 m
490.8701 188.3789 L
486.7344 184.8662 L
489.1719 184.1787 L
486.2725 179.6611 483.21 177.1494 480.1279 176.6416 C
480.165 189.4922 L
484.7188 189.792 L
485.3076 191.6211 L
480.1699 191.1064 L
480.1816 194.8984 L
481.0078 195.5381 481.542 196.5391 481.542 197.6641 c
481.542 199.5928 479.9766 201.1563 478.0479 201.1563 c
476.1191 201.1563 474.5547 199.5928 474.5547 197.6641 c
474.5547 196.1914 475.4658 194.9326 476.7549 194.4189 C
477.0215 190.791 L
471.4805 190.2373 L
471.8223 188.9424 L
477.1309 189.291 L
478.0605 176.6035 L
475.0361 176.9854 472.0264 179.2979 469.165 183.543 C
470.998 184.5693 L
466.8379 187.4014 L
466.3984 181.9922 L
468.1406 182.9688 L
468.9912 179.9209 471.3613 174.3203 479.2764 171.7217 C
487.1377 175.0332 489.7412 184.0186 V
491.8066 183.4355 L
f
0 D
476.0264 197.665 m
476.0264 198.7803 476.9316 199.6855 478.0479 199.6855 c
479.1641 199.6855 480.0693 198.7803 480.0693 197.665 c
480.0693 196.5479 479.1641 195.6416 478.0479 195.6416 c
476.9316 195.6416 476.0264 196.5479 476.0264 197.665 c
f
*U
U
0.047059 0.952941 0.87451 0.003922 0.890196 0.188235 0.203922 Xa
474.3721 251.4189 m
480.1953 238.3174 l
581.7871 218.5918 l
586.4736 233.9492 l
474.3721 251.4189 l
f
u
1 Ap
0.764706 0.513725 0.015686 0 0.27451 0.462745 0.721569 Xa
547.0352 213.6387 m
541.3535 214.5762 L
542.8623 223.7158 L
548.5439 222.7783 L
547.0352 213.6387 L
f
545.1709 202.3477 m
539.4893 203.2861 L
540.999 212.4258 L
546.6797 211.4883 L
545.1709 202.3477 L
f
555.249 212.2832 m
549.5674 213.2197 L
551.0762 222.3604 L
556.7578 221.4219 L
555.249 212.2832 L
f
553.3857 200.9922 m
547.7041 201.9297 L
549.2129 211.0703 L
554.8945 210.1318 L
553.3857 200.9922 L
f
U
u
522.707 213.5381 m
517.0254 214.4766 L
518.5342 223.6152 L
524.2158 222.6777 L
522.707 213.5381 L
f
530.9209 212.1826 m
525.2393 213.1201 L
526.748 222.2598 L
532.4297 221.3213 L
530.9209 212.1826 L
f
U
U
u
0.054902 0 0.015686 0 0.929412 0.968627 0.976471 Xa
256.5439 151.1943 m
223.4717 151.1943 L
223.4717 200.3398 L
256.5439 200.3398 L
256.5439 151.1943 L
f
0 Ap
0.047059 0.952941 0.87451 0.003922 0.890196 0.188235 0.203922 Xa
222.4736 153.2012 m
205.5166 24.7783 l
277.3369 24.7783 l
257.3867 152.459 l
222.4736 153.2012 l
f
222.4736 153.2012 m
205.5166 24.7783 l
277.3369 24.7783 l
257.3867 152.459 l
222.4736 153.2012 l
f
0.862745 0.854902 0.443137 0.478431 0.164706 0.145098 0.262745 Xa
245.894 221.9014 m
244.1523 237.502 L
240.7861 237.502 L
238.8994 221.5537 L
211.4326 194.9082 L
226.5327 201.4551 250.0786 201.4434 269.5088 192.9961 C
245.894 221.9014 L
f
u
*u
1 D
205.0186 177.3975 m
219.4814 148.9678 L
263.3711 148.4688 L
272.3496 181.8848 L
249.8403 183.9805 227.4141 181.5117 205.0186 177.3975 C
f
0 D
250.4438 176.8623 m
256.7378 177.2461 L
254.8076 168.7988 L
252.8408 169.1523 250.8647 169.4463 248.8823 169.665 C
250.4438 176.8623 L
f
243.9478 170.0547 m
241.6533 170.1709 239.3594 170.1914 237.0659 170.1113 C
236.5156 176.0166 L
244.4878 176.5 L
243.9478 170.0547 L
f
232.103 169.79 m
229.3916 169.5186 226.6958 169.0859 224.0195 168.5137 C
221.5972 175.1084 L
230.7695 175.666 L
232.103 169.79 L
f
224.667 166.75 m
226.0938 167.0166 228.9878 167.3691 232.6094 167.5566 C
235.9683 152.7432 L
229.7866 152.8125 L
224.667 166.75 L
f
237.2915 167.6875 m
239.3628 167.6943 241.5396 167.627 243.729 167.4619 C
242.4897 152.6689 L
238.687 152.7119 L
237.2915 167.6875 L
f
248.3101 167.0205 m
250.3726 166.7881 252.3486 166.4541 254.1846 166.0742 C
251.1006 152.5703 L
245.1909 152.6377 L
248.3101 167.0205 L
f
262.3252 177.5859 m
267.7803 177.917 L
264.6997 166.4512 L
262.9336 166.9727 261.1582 167.4531 259.3677 167.8701 C
262.9023 177.4131 L
262.3252 177.5859 L
f
215.4922 174.7383 m
219.353 167.3584 L
217.7773 166.9072 216.2104 166.3916 214.6558 165.8252 C
213.3711 168.0244 211.877 170.7266 210.0059 174.4033 C
215.4922 174.7383 L
f
216.1021 163.4111 m
217.314 164.0762 218.8428 164.8496 220.3384 165.4756 C
226.9473 152.8457 L
222.2549 152.8984 L
219.9565 157.416 218.2925 159.8271 216.1021 163.4111 C
f
260.9409 152.459 m
253.6914 152.541 L
258.3408 165.0957 L
260.7842 164.4443 262.707 163.8008 263.8726 163.373 C
260.9409 152.459 L
f
*U
U
*u
1 D
0 0 0 0 1 1 1 Xa
263.4346 113.7578 m
247.8179 106.9316 231.5088 101.2383 214.96 96.293 C
213.8774 88.0957 L
231.2007 91.457 248.4487 95.5693 265.4224 101.0322 C
263.4346 113.7578 L
f
272.9707 52.7217 m
251.6729 43.1045 229.0005 35.6904 206.1343 29.4521 C
205.5166 24.7783 L
216.2661 24.7783 L
236.0278 28.4971 255.7163 33.1279 275.0244 39.5801 C
272.9707 52.7217 L
f
268.3535 82.2705 m
249.8174 73.792 230.2163 67.0098 210.332 61.2432 C
209.313 53.5273 L
229.876 57.3662 250.3613 62.1826 270.4292 68.9873 C
268.3535 82.2705 L
f
258.9727 142.3086 m
246.0728 136.4385 232.665 131.375 219.0024 126.9102 C
217.7344 117.2998 L
232.2974 120.4717 246.7729 124.2744 261.0396 129.083 C
258.9727 142.3086 L
f
*U
0 D
0.862745 0.854902 0.443137 0.478431 0.164706 0.145098 0.262745 Xa
185.5664 33.7559 m
182.5742 17.7959 l
290.3047 17.7959 l
287.312 27.7715 l
185.5664 33.7559 l
f
0.764706 0.513725 0.015686 0 0.27451 0.462745 0.721569 Xa
236.4395 192.8584 m
237.4365 185.377 l
246.4146 186.374 l
246.4146 194.8525 l
236.4395 192.8584 l
f
U
u
u
1 Ap
0.282353 0.635294 0 0 0.717647 0.454902 0.690196 Xa
274.6821 287.8125 m
274.6821 261.2148 253.1191 239.6494 226.5215 239.6494 c
199.9224 239.6494 178.3594 261.2148 178.3594 287.8125 c
178.3594 314.4111 199.9224 335.9751 226.5215 335.9751 c
253.1191 335.9751 274.6821 314.4111 274.6821 287.8125 c
f
0 Ap
0.047059 0.952941 0.87451 0.003922 0.890196 0.188235 0.203922 Xa
226.8022 335.9683 m
226.7085 335.9692 226.6157 335.9751 226.5215 335.9751 c
199.9224 335.9751 178.3594 314.4111 178.3594 287.8125 c
178.3594 262.8994 197.2744 242.4092 221.5278 239.9121 C
217.0513 247.751 213.8745 256.2314 212.7061 265.2861 c
209.9966 288.582 208.2764 319.7568 226.8022 335.9683 C
f
0.054902 0 0.015686 0 0.929412 0.968627 0.976471 Xa
241.8965 268.8594 m
250.6646 291.3271 247.3232 317.8188 230.0435 335.832 C
228.9707 335.9102 227.8921 335.96 226.8022 335.9683 C
208.2764 319.7568 209.9966 288.582 212.7061 265.2861 c
213.8745 256.2314 217.0513 247.751 221.5278 239.9121 C
222.375 239.8252 223.2285 239.7549 224.0889 239.7129 C
232.1768 247.5576 238.3447 258.6016 241.8965 268.8594 C
f
0.862745 0.854902 0.443137 0.478431 0.164706 0.145098 0.262745 Xa
230.0435 335.832 m
247.3232 317.8188 250.6646 291.3271 241.8965 268.8594 C
238.3447 258.6016 232.1768 247.5576 224.0889 239.7129 C
224.8955 239.6709 225.7056 239.6494 226.5215 239.6494 c
253.1191 239.6494 274.6821 261.2148 274.6821 287.8125 c
274.6821 313.2266 254.9951 334.0278 230.0435 335.832 C
f
U
0.764706 0.513725 0.015686 0 0.27451 0.462745 0.721569 Xa
227.418 299.5615 m
230.6606 292.9932 L
237.9106 291.9385 L
232.6646 286.8262 L
233.9019 279.6074 L
227.418 283.0146 L
220.9336 279.6074 L
222.1714 286.8262 L
216.9258 291.9385 L
224.1758 292.9932 L
227.418 299.5615 L
f
U
u
*u
0.211765 0.980392 1 0.129412 0.694118 0.137255 0.121569 Xa
570.4209 365.0752 m
558.418 349.2822 L
558.418 349.0308 L
577.4971 351.5566 L
577.4971 342.9658 L
558.418 345.2402 L
558.418 344.9863 L
570.5459 329.8276 L
562.5869 325.2783 L
555.0059 342.9658 L
554.7549 342.9658 L
546.542 325.1514 L
539.3398 329.7007 L
551.3428 345.1133 L
551.3428 345.3672 L
532.6445 342.9658 L
532.6445 351.5566 L
551.2158 349.1577 L
551.2158 349.4092 L
539.3398 364.8242 L
547.0469 369.2441 L
554.8789 351.6836 L
555.1328 351.6836 L
562.8408 369.3711 L
570.4209 365.0752 l
f
*U
U
u
*u
48.2588 178.3262 m
39.1323 166.3184 L
39.1323 166.126 L
53.6387 168.0469 L
53.6387 161.5156 L
39.1323 163.2441 L
39.1323 163.0508 L
48.3535 151.5254 L
42.3022 148.0674 L
36.5381 161.5156 L
36.3472 161.5156 L
30.1025 147.9707 L
24.627 151.4287 L
33.7529 163.1475 L
33.7529 163.3408 L
19.5361 161.5156 L
19.5361 168.0469 L
33.6563 166.2227 L
33.6563 166.4141 L
24.627 178.1338 L
30.4868 181.4951 L
36.4414 168.1426 L
36.6348 168.1426 L
42.4951 181.5918 L
48.2588 178.3262 l
f
*U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
